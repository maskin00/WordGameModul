#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üõ†Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –®–ê–ë–õ–û–ù –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–ª—É–∂–∏—Ç —à–∞–±–ª–æ–Ω–æ–º –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä—ã.
–°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∏–∑ DEVELOPMENT_GUIDELINES.md

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
2. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main()
3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ create_translations()
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç

–ü–†–ò–ú–ï–† –£–°–ü–ï–®–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–î–∏–Ω–æ–∑–∞–≤—Ä—ã" - 122 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, 4 —è–∑—ã–∫–∞

–í–ê–ñ–ù–´–ï –£–†–û–ö–ò –ò–ó –û–ü–´–¢–ê –°–û–ó–î–ê–ù–ò–Ø –î–ò–ù–û–ó–ê–í–†–û–í:
1. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç .png –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
2. –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ DataManager.js (—Å—Ç—Ä–æ–∫–∏ ~55 –∏ ~210)
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–∞–∑—É, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–∞—Ö —Å–ª–æ–≤
5. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
"""

import os
import json
import shutil
from pathlib import Path

def create_category(category_config):
    """
    –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    Args:
        category_config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    
    print(f"üéØ –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò '{category_config['names']['ru'].upper()}'")
    print("=" * 60)
    
    # 1. –ê–ù–ê–õ–ò–ó - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    source_dir = Path(category_config['source_images_path'])
    if not source_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = []
    for ext in category_config.get('image_extensions', ['*.jpg', '*.jpeg', '*.png']):
        image_files.extend(source_dir.glob(ext))
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
    exclude_patterns = category_config.get('exclude_patterns', ['parse_*', '.*'])
    for pattern in exclude_patterns:
        image_files = [f for f in image_files if not f.name.startswith(pattern.replace('*', ''))]
    
    image_files.sort()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # 2. –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï - –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    translations = category_config.get('translations', {})
    
    # 3. –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø - –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    
    # 3.1 –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
    target_images_dir = Path(f"data/images/{category_config['id']}")
    target_images_dir.mkdir(parents=True, exist_ok=True)
    
    # 3.2 –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    category_data = []
    for i, image_file in enumerate(image_files, 1):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        item_name = image_file.stem
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        clean_name = clean_item_name(item_name, category_config.get('name_cleaning_rules', {}))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        new_filename = f"{i:03d}-{clean_name.lower().replace(' ', '_')}.jpg"
        target_path = target_images_dir / new_filename
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        try:
            shutil.copy2(image_file, target_path)
            print(f"üìÅ {image_file.name} ‚Üí {new_filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {image_file.name}: {e}")
            continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        category_data.append({
            'id': i,
            'name': clean_name,
            'filename': new_filename,
            'translations': translations.get(clean_name.lower(), {})
        })
    
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(category_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # 3.3 –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
    create_word_files(category_data, category_config)
    
    # 3.4 –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    update_categories_config(category_config)
    
    # 3.5 –£–†–û–ö –ò–ó –î–ò–ù–û–ó–ê–í–†–û–í: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º DataManager.js
    fix_datamanager_for_new_category(category_config['id'])
    
    # 3.6 –£–†–û–ö –ò–ó –î–ò–ù–û–ó–ê–í–†–û–í: –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    create_russian_translations_template(category_data, category_config)
    
    # 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    validate_created_files(category_data, category_config)
    
    print(f"\nüéâ –ö–ê–¢–ï–ì–û–†–ò–Ø '{category_config['names']['ru'].upper()}' –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
    print(f"   üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(category_data)}")
    print(f"   üìù –°–ª–æ–≤–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: 4 —è–∑—ã–∫–∞")
    print(f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    return True

def clean_item_name(name, cleaning_rules):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    clean = name.replace('_', ' ').replace('-', ' ')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏
    for rule in cleaning_rules.get('remove_patterns', []):
        clean = clean.replace(rule, '')
    
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã/—Å—É—Ñ—Ñ–∏–∫—Å—ã
    if cleaning_rules.get('remove_i_wrapper', False):
        if clean.startswith('i') and clean.endswith('i'):
            clean = clean[1:-1]
    
    # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
    return clean.strip().title()

def create_word_files(category_data, category_config):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤"""
    languages = {
        'ru': '—Ä—É—Å—Å–∫–∏–π',
        'en': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', 
        'es': '–∏—Å–ø–∞–Ω—Å–∫–∏–π',
        'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'
    }
    
    for lang_code, lang_name in languages.items():
        print(f"üìù –°–æ–∑–¥–∞—é —Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è {lang_name} —è–∑—ã–∫–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        lang_dir = Path(f"data/words/{lang_code}")
        lang_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        file_path = lang_dir / f"{category_config['id']}_COMPLETE.txt"
        
        with open(file_path, 'w', encoding='utf-8') as f:
            for item in category_data:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
                if lang_code == 'ru':
                    name = item['name'].upper()  # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    name = item['translations'].get(lang_code, item['name']).upper()
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID - –ù–ê–ó–í–ê–ù–ò–ï - –§–ê–ô–õ_–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
                f.write(f"{item['id']} - {name} - {item['filename']}\n")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")

def update_categories_config(category_config):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("‚öôÔ∏è –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    config_path = Path("data/config/categories.json")
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    new_category = {
        "id": category_config['id'],
        "names": category_config['names'],
        "description": category_config['descriptions'],
        "imageFolder": category_config['id'],
        "wordFiles": {
            "ru": f"{category_config['id']}_COMPLETE.txt",
            "en": f"{category_config['id']}_COMPLETE.txt", 
            "es": f"{category_config['id']}_COMPLETE.txt",
            "fr": f"{category_config['id']}_COMPLETE.txt"
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    config["categories"].append(new_category)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def fix_datamanager_for_new_category(category_id):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ DataManager.js
    –£—Ä–æ–∫ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤: –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥–≤–∞ –º–µ—Å—Ç–∞
    """
    print(f"üîß –î–æ–±–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_id}' –≤ DataManager.js...")
    
    datamanager_path = Path("modules/DataManager.js")
    if not datamanager_path.exists():
        print("‚ö†Ô∏è –§–∞–π–ª DataManager.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(datamanager_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    if f"categoryId === '{category_id}'" in content:
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_id}' —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ DataManager.js")
        return True
    
    # –ò—â–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    # –ú–µ—Å—Ç–æ 1: –≤ —Ñ—É–Ω–∫—Ü–∏–∏ loadWordData (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 55)
    pattern1 = "// –î–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ - imageCode —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n                        else if (categoryId === 'animals' || categoryId === 'dinosaurs') {"
    replacement1 = f"// –î–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö, –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –∏ {category_id} - imageCode —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n                        else if (categoryId === 'animals' || categoryId === 'dinosaurs' || categoryId === '{category_id}') {{"
    
    # –ú–µ—Å—Ç–æ 2: –≤ —Ñ—É–Ω–∫—Ü–∏–∏ parseWordsFile (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 210)
    pattern2 = "// –î–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ - imageCode —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n                    else if (categoryId === 'animals' || categoryId === 'dinosaurs') {"
    replacement2 = f"// –î–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö, –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –∏ {category_id} - imageCode —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n                    else if (categoryId === 'animals' || categoryId === 'dinosaurs' || categoryId === '{category_id}') {{"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    updated_content = content.replace(pattern1, replacement1).replace(pattern2, replacement2)
    
    if updated_content != content:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(datamanager_path, 'w', encoding='utf-8') as f:
            f.write(updated_content)
        print(f"‚úÖ DataManager.js –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_id}'")
        return True
    else:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_id}' –≤ DataManager.js")
        print("   –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä—É—á–Ω—É—é –≤ —Å—Ç—Ä–æ–∫–∞—Ö ~55 –∏ ~210")
        return False

def create_russian_translations_template(category_data, category_config):
    """
    –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    –£—Ä–æ–∫ –∏–∑ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤: –≤–∞–∂–Ω–æ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    """
    print("üìù –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    
    template_path = Path(f"tools/russian_translations_{category_config['id']}.py")
    
    with open(template_path, 'w', encoding='utf-8') as f:
        f.write(f"""#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_config['names']['ru']}'
# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–ª–æ–≤

russian_translations = {{
""")
        
        for item in category_data:
            key = item['name'].lower().replace(' ', '_')
            f.write(f'    "{key}": "{item["name"].upper()}",  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n')
        
        f.write(f"""}}

def update_russian_translations():
    \"\"\"–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ñ–∞–π–ª–µ —Å–ª–æ–≤\"\"\"
    
    with open('data/words/ru/{category_config['id']}_COMPLETE.txt', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    new_lines = []
    for line in lines:
        parts = line.strip().split(' - ')
        if len(parts) >= 3:
            number, english_name, image_file = parts
            key = image_file.replace('.jpg', '').split('-', 1)[1] if '-' in image_file else english_name.lower()
            russian_name = russian_translations.get(key, english_name)
            new_lines.append(f"{{number}} - {{russian_name}} - {{image_file}}\\n")
    
    with open('data/words/ru/{category_config['id']}_COMPLETE.txt', 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    print("‚úÖ –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    update_russian_translations()
""")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {template_path}")
    print("   –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

def validate_created_files(category_data, category_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images_dir = Path(f"data/images/{category_config['id']}")
    if not images_dir.exists():
        errors.append("–ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    else:
        for item in category_data:
            image_path = images_dir / item['filename']
            if not image_path.exists():
                errors.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {item['filename']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
    for lang in ['ru', 'en', 'es', 'fr']:
        word_file = Path(f"data/words/{lang}/{category_config['id']}_COMPLETE.txt")
        if not word_file.exists():
            errors.append(f"–°–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {lang}")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(word_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                if len(lines) != len(category_data):
                    errors.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ {lang}: {len(lines)} –≤–º–µ—Å—Ç–æ {len(category_data)}")
    
    if errors:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        return False
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

# –ü–†–ò–ú–ï–† –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –î–õ–Ø –î–ò–ù–û–ó–ê–í–†–û–í (–£–°–ü–ï–®–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù)
def get_dinosaurs_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤"""
    return {
        'id': 'dinosaurs',
        'source_images_path': 'E:/Games/dinosaurs',
        'names': {
            'ru': '–î–∏–Ω–æ–∑–∞–≤—Ä—ã',
            'en': 'Dinosaurs',
            'es': 'Dinosaurios',
            'fr': 'Dinosaures'
        },
        'descriptions': {
            'ru': '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä –¥—Ä–µ–≤–Ω–∏—Ö —Ä–µ–ø—Ç–∏–ª–∏–π',
            'en': 'Discover the amazing world of ancient reptiles',
            'es': 'Descubre el incre√≠ble mundo de los reptiles antiguos',
            'fr': 'D√©couvrez le monde incroyable des reptiles anciens'
        },
        'image_extensions': ['*.jpg', '*.jpeg', '*.png'],
        'exclude_patterns': ['parse_*'],
        'name_cleaning_rules': {
            'remove_patterns': [],
            'remove_i_wrapper': True
        },
        'translations': create_dinosaur_translations()
    }

def create_dinosaur_translations():
    """–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä)"""
    # –ó–¥–µ—Å—å –±—ã–ª –±–æ–ª—å—à–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤...
    # –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    return {
        'stegosaurus': {'en': 'Stegosaurus', 'es': 'Estegosaurus', 'fr': 'St√©gosaure'},
        'tyrannosaurus': {'en': 'Tyrannosaurus', 'es': 'Tiranosaurus', 'fr': 'Tyrannosaure'},
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    }

def main():
    """
    –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ù–ê–°–¢–†–û–ô–¢–ï –ó–î–ï–°–¨ –ü–ê–†–ê–ú–ï–¢–†–´ –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò
    
    –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
    1. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ category_config
    2. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é create_translations()
    3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç
    """
    
    # –ü–†–ò–ú–ï–†: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ (—É–∂–µ —Å–æ–∑–¥–∞–Ω–∞)
    category_config = get_dinosaurs_config()
    
    # –î–õ–Ø –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–ò –ü–ê–†–ê–ú–ï–¢–†–´:
    # category_config = {
    #     'id': 'your_category_id',
    #     'source_images_path': '–ø—É—Ç—å/–∫/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º',
    #     'names': {
    #         'ru': '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
    #         'en': 'English Name',
    #         'es': 'Nombre en espa√±ol',
    #         'fr': 'Nom en fran√ßais'
    #     },
    #     'descriptions': {
    #         'ru': '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
    #         'en': 'Description in English',
    #         'es': 'Descripci√≥n en espa√±ol',
    #         'fr': 'Description en fran√ßais'
    #     },
    #     'translations': your_translations_dict()
    # }
    
    success = create_category(category_config)
    
    if success:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π")
    else:
        print("\n‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main() 