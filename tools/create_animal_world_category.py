#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Create "Animal World" category from Russian and English animal images
1. Clean Russian filenames from extra words
2. Translate Russian names to English
3. Merge with existing English images without duplicates
4. Number the final collection
5. Create category files
"""

import os
import shutil
import re
from PIL import Image
import json

def clean_russian_filename(filename):
    """Clean Russian filename from extra words like '—Ñ–æ—Ç–æ', '–∂–∏–≤–æ—Ç–Ω–æ–µ', etc."""
    # Remove file extension
    name = os.path.splitext(filename)[0]
    
    # Remove common extra words
    extra_words = [
        '_—Ñ–æ—Ç–æ', '—Ñ–æ—Ç–æ_', '—Ñ–æ—Ç–æ',
        '_–∂–∏–≤–æ—Ç–Ω–æ–µ', '–∂–∏–≤–æ—Ç–Ω–æ–µ_', '–∂–∏–≤–æ—Ç–Ω–æ–µ',
        '_—Ä—ã–±–∞', '—Ä—ã–±–∞_', '—Ä—ã–±–∞',
        '_–∫–æ—à–∫–∞', '–∫–æ—à–∫–∞_', 
        '_—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫–∞_',
        '_—Å_–¥–µ—Ç–µ–Ω—ã—à–µ–º', '_—Å_–¥–µ—Ç–µ–Ω—ã—à–∞–º–∏',
        '_—â–µ–Ω–∫–∏', '—â–µ–Ω–∫–∏_',
        '_–¥–µ—Ç–µ–Ω—ã—à–∏', '–¥–µ—Ç–µ–Ω—ã—à–∏_',
        '_—Å–µ–º–µ–π—Å—Ç–≤–æ', '—Å–µ–º–µ–π—Å—Ç–≤–æ_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è_',
        '_–¥–∏–∫–∞—è', '–¥–∏–∫–∞—è_',
        '_–¥–∏–∫–∏–π', '–¥–∏–∫–∏–π_',
        '_—Ö–∏—â–Ω—ã–µ', '—Ö–∏—â–Ω—ã–µ_',
        '_–Ω–∞_–æ—Ö–æ—Ç–µ', '_–æ—Ö–æ—Ç–∞',
        '_—É–¥–∞—á–Ω–∞—è_–æ—Ö–æ—Ç–∞',
        '_—Å—Ç–∞—è', '—Å—Ç–∞—è_',
        '_–ø—Ä–∞–π–¥', '–ø—Ä–∞–π–¥_',
        '_–Ω–µ—Ä–µ—Å—Ç'
    ]
    
    # Clean the name
    cleaned = name.lower()
    for word in extra_words:
        cleaned = cleaned.replace(word, '')
    
    # Remove multiple underscores and clean up
    cleaned = re.sub(r'_+', '_', cleaned)
    cleaned = cleaned.strip('_')
    
    # Handle specific cases
    if '–∞–∫—É–ª–∞' in cleaned:
        # Keep only the type of shark
        if '–±—ã—á—å—è' in cleaned or '—Ç—É–ø–æ—Ä—ã–ª–∞—è' in cleaned:
            cleaned = '–±—ã—á—å—è_–∞–∫—É–ª–∞'
        elif '—Ç–∏–≥—Ä–æ–≤–∞—è' in cleaned:
            cleaned = '—Ç–∏–≥—Ä–æ–≤–∞—è_–∞–∫—É–ª–∞'
        elif '–±–µ–ª–∞—è' in cleaned or '–∫–∞—Ä—Ö–∞—Ä–æ–¥–æ–Ω' in cleaned:
            cleaned = '–±–µ–ª–∞—è_–∞–∫—É–ª–∞'
        elif '–∫–∏—Ç–æ–≤–∞—è' in cleaned:
            cleaned = '–∫–∏—Ç–æ–≤–∞—è_–∞–∫—É–ª–∞'
        elif '–º–æ–ª–æ—Ç' in cleaned:
            cleaned = '–∞–∫—É–ª–∞_–º–æ–ª–æ—Ç'
        elif '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è' in cleaned:
            cleaned = '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è_–∞–∫—É–ª–∞'
        elif '–ø–æ–ª—è—Ä–Ω–∞—è' in cleaned:
            cleaned = '–ø–æ–ª—è—Ä–Ω–∞—è_–∞–∫—É–ª–∞'
        else:
            cleaned = '–∞–∫—É–ª–∞'
    
    elif '–ª–µ–≤' in cleaned:
        if '–∞–∑–∏–∞—Ç—Å–∫–∏–π' in cleaned:
            cleaned = '–∞–∑–∏–∞—Ç—Å–∫–∏–π_–ª–µ–≤'
        elif '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π' in cleaned:
            cleaned = '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π_–ª–µ–≤'
        elif '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π' in cleaned:
            cleaned = '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π_–ª–µ–≤'
        else:
            cleaned = '–ª–µ–≤'
    
    elif '–≤–æ–ª–∫' in cleaned:
        if '—Å–µ—Ä—ã–π' in cleaned:
            cleaned = '—Å–µ—Ä—ã–π_–≤–æ–ª–∫'
        else:
            cleaned = '–≤–æ–ª–∫'
    
    elif '—Å—É–¥–∞–∫' in cleaned:
        if '–≤–æ–ª–∂—Å–∫–∏–π' in cleaned or '–±—ë—Ä—à' in cleaned or '–±–µ—Ä—à' in cleaned:
            cleaned = '–±–µ—Ä—à'
        else:
            cleaned = '—Å—É–¥–∞–∫'
    
    elif '–µ–Ω–æ—Ç' in cleaned:
        if '—Ä–∞–∫–æ–µ–¥' in cleaned:
            cleaned = '–µ–Ω–æ—Ç_—Ä–∞–∫–æ–µ–¥'
        elif '–ø–æ–ª–æ—Å–∫—É–Ω' in cleaned:
            cleaned = '–µ–Ω–æ—Ç_–ø–æ–ª–æ—Å–∫—É–Ω'
        else:
            cleaned = '–µ–Ω–æ—Ç'
    
    elif '–Ω–æ—Ä–∫–∞' in cleaned:
        if '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è' in cleaned:
            cleaned = '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è_–Ω–æ—Ä–∫–∞'
        else:
            cleaned = '–Ω–æ—Ä–∫–∞'
    
    elif '–≤—ã–¥—Ä–∞' in cleaned:
        cleaned = '–≤—ã–¥—Ä–∞'
    
    elif '–¥–∏–Ω–≥–æ' in cleaned:
        cleaned = '–¥–∏–Ω–≥–æ'
    
    elif '–æ—Ü–µ–ª–æ—Ç' in cleaned:
        cleaned = '–æ—Ü–µ–ª–æ—Ç'
    
    elif '—Å–æ–±–æ–ª—å' in cleaned:
        cleaned = '—Å–æ–±–æ–ª—å'
    
    elif '—à–∞–∫–∞–ª' in cleaned:
        if '—ç—Ñ–∏–æ–ø—Å–∫–∏–π' in cleaned:
            cleaned = '—ç—Ñ–∏–æ–ø—Å–∫–∏–π_—à–∞–∫–∞–ª'
        else:
            cleaned = '—à–∞–∫–∞–ª'
    
    elif '–∫–æ–π–æ—Ç' in cleaned:
        cleaned = '–∫–æ–π–æ—Ç'
    
    elif '–º–∞–Ω–≥—É—Å—Ç' in cleaned:
        if '–≤–æ–¥—è–Ω–æ–π' in cleaned:
            cleaned = '–≤–æ–¥—è–Ω–æ–π_–º–∞–Ω–≥—É—Å—Ç'
        elif '–∫—Ä–∞–±–æ–µ–¥' in cleaned:
            cleaned = '–º–∞–Ω–≥—É—Å—Ç_–∫—Ä–∞–±–æ–µ–¥'
        else:
            cleaned = '–º–∞–Ω–≥—É—Å—Ç'
    
    elif '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫' in cleaned or '–º–æ—Ä—Å–∫–∏–µ_–∫–æ–Ω—å–∫–∏' in cleaned:
        cleaned = '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫'
    
    elif '—É–≥–æ—Ä—å' in cleaned:
        if '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π' in cleaned:
            cleaned = '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_—É–≥–æ—Ä—å'
        else:
            cleaned = '—É–≥–æ—Ä—å'
    
    elif '–ø—Ä—ã–≥—É–Ω' in cleaned and '–∏–ª–∏—Å—Ç—ã–π' in cleaned:
        cleaned = '–∏–ª–∏—Å—Ç—ã–π_–ø—Ä—ã–≥—É–Ω'
    
    elif '–∫–∞—Ä–∞—Å—å' in cleaned:
        if '–∑–æ–ª–æ—Ç–æ–π' in cleaned:
            cleaned = '–∑–æ–ª–æ—Ç–æ–π_–∫–∞—Ä–∞—Å—å'
        else:
            cleaned = '–∫–∞—Ä–∞—Å—å'
    
    elif '—â—É–∫–∞' in cleaned:
        cleaned = '—â—É–∫–∞'
    
    elif '–ª–∏—Å–∏—Ü–∞' in cleaned:
        if '–±–æ–ª—å—à–µ—É—Ö–∞—è' in cleaned:
            cleaned = '–±–æ–ª—å—à–µ—É—Ö–∞—è_–ª–∏—Å–∏—Ü–∞'
        else:
            cleaned = '–ª–∏—Å–∏—Ü–∞'
    
    elif '–∫–æ—à–∫–∞' in cleaned:
        if '—á–∏–ª–∏–π—Å–∫–∞—è' in cleaned:
            cleaned = '—á–∏–ª–∏–π—Å–∫–∞—è_–∫–æ—à–∫–∞'
        else:
            cleaned = '–∫–æ—à–∫–∞'
    
    elif '—Å–æ–±–∞–∫–∞' in cleaned:
        if '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è' in cleaned:
            cleaned = '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞'
        elif '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è' in cleaned:
            cleaned = '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞'
        else:
            cleaned = '—Å–æ–±–∞–∫–∞'
    
    # Handle fish names
    fish_names = {
        '—É–∫–ª–µ–π–∫–∞': '—É–∫–ª–µ–π–∫–∞',
        '–≥–æ—Ä–±—É—à–∞': '–≥–æ—Ä–±—É—à–∞',
        '–±—ã—Å—Ç—Ä—è–Ω–∫–∞': '–±—ã—Å—Ç—Ä—è–Ω–∫–∞',
        '—è–∑—å': '—è–∑—å',
        '–µ–ª–µ—Ü': '–µ–ª–µ—Ü',
        '—Å–∏–≥': '—Å–∏–≥',
        '–º–µ—á': '—Ä—ã–±–∞_–º–µ—á',
        '—Ç–æ–ø–æ—Ä–∏–∫': '—Ä—ã–±–∞_—Ç–æ–ø–æ—Ä–∏–∫',
        '—Å–æ–ª–Ω–µ—á–Ω–∞—è': '—Å–æ–ª–Ω–µ—á–Ω–∞—è_—Ä—ã–±–∞'
    }
    
    for fish, name in fish_names.items():
        if fish in cleaned:
            cleaned = name
            break
    
    return cleaned

def get_russian_to_english_translations():
    """Get translation dictionary from Russian to English animal names"""
    return {
        # –ê–∫—É–ª—ã
        '–±—ã—á—å—è_–∞–∫—É–ª–∞': 'bull_shark',
        '—Ç–∏–≥—Ä–æ–≤–∞—è_–∞–∫—É–ª–∞': 'tiger_shark',
        '–±–µ–ª–∞—è_–∞–∫—É–ª–∞': 'great_white_shark',
        '–∫–∏—Ç–æ–≤–∞—è_–∞–∫—É–ª–∞': 'whale_shark',
        '–∞–∫—É–ª–∞_–º–æ–ª–æ—Ç': 'hammerhead_shark',
        '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'sixgill_shark',
        '–ø–æ–ª—è—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'greenland_shark',
        '–∞–∫—É–ª–∞': 'shark',
        
        # –•–∏—â–Ω–∏–∫–∏
        '–ª–µ–≤': 'lion',
        '–∞–∑–∏–∞—Ç—Å–∫–∏–π_–ª–µ–≤': 'asiatic_lion',
        '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π_–ª–µ–≤': 'african_lion',
        '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π_–ª–µ–≤': 'barbary_lion',
        '–ª–µ–æ–ø–∞—Ä–¥': 'leopard',
        '–∏—Ä–±–∏—Å': 'snow_leopard',
        
        # –í–æ–ª–∫–∏ –∏ —Å–æ–±–∞—á—å–∏
        '–≤–æ–ª–∫': 'wolf',
        '—Å–µ—Ä—ã–π_–≤–æ–ª–∫': 'gray_wolf',
        '—à–∞–∫–∞–ª': 'jackal',
        '—ç—Ñ–∏–æ–ø—Å–∫–∏–π_—à–∞–∫–∞–ª': 'ethiopian_wolf',
        '–∫–æ–π–æ—Ç': 'coyote',
        '–¥–∏–Ω–≥–æ': 'dingo',
        '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'african_wild_dog',
        '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'raccoon_dog',
        '—Å–æ–±–∞–∫–∞': 'dog',
        
        # –ö–æ—à–∞—á—å–∏
        '–æ—Ü–µ–ª–æ—Ç': 'ocelot',
        '—á–∏–ª–∏–π—Å–∫–∞—è_–∫–æ—à–∫–∞': 'kodkod',
        '–∫–æ—à–∫–∞': 'cat',
        
        # –ö—É–Ω—å–∏
        '—Å–æ–±–æ–ª—å': 'sable',
        '–≤—ã–¥—Ä–∞': 'otter',
        '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è_–Ω–æ—Ä–∫–∞': 'european_mink',
        '–Ω–æ—Ä–∫–∞': 'mink',
        
        # –ï–Ω–æ—Ç—ã –∏ –º–∞–Ω–≥—É—Å—Ç—ã
        '–µ–Ω–æ—Ç_–ø–æ–ª–æ—Å–∫—É–Ω': 'raccoon',
        '–µ–Ω–æ—Ç_—Ä–∞–∫–æ–µ–¥': 'crab_eating_raccoon',
        '–µ–Ω–æ—Ç': 'raccoon',
        '–≤–æ–¥—è–Ω–æ–π_–º–∞–Ω–≥—É—Å—Ç': 'marsh_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç_–∫—Ä–∞–±–æ–µ–¥': 'crab_eating_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç': 'mongoose',
        
        # –õ–∏—Å—ã
        '–±–æ–ª—å—à–µ—É—Ö–∞—è_–ª–∏—Å–∏—Ü–∞': 'bat_eared_fox',
        '–ª–∏—Å–∏—Ü–∞': 'fox',
        
        # –†—ã–±—ã
        '—Å—É–¥–∞–∫': 'zander',
        '–±–µ—Ä—à': 'volga_zander',
        '—Ä—ã–±–∞_–º–µ—á': 'swordfish',
        '—É–∫–ª–µ–π–∫–∞': 'bleak',
        '–≥–æ—Ä–±—É—à–∞': 'pink_salmon',
        '–±—ã—Å—Ç—Ä—è–Ω–∫–∞': 'spirlin',
        '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫': 'seahorse',
        '—è–∑—å': 'ide',
        '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_—É–≥–æ—Ä—å': 'electric_eel',
        '—É–≥–æ—Ä—å': 'eel',
        '–∏–ª–∏—Å—Ç—ã–π_–ø—Ä—ã–≥—É–Ω': 'mudskipper',
        '—Å–æ–ª–Ω–µ—á–Ω–∞—è_—Ä—ã–±–∞': 'sunfish',
        '—Ä—ã–±–∞_—Ç–æ–ø–æ—Ä–∏–∫': 'hatchetfish',
        '–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '–∑–æ–ª–æ—Ç–æ–π_–∫–∞—Ä–∞—Å—å': 'goldfish',
        '—â—É–∫–∞': 'pike',
        '–µ–ª–µ—Ü': 'dace',
        '—Å–∏–≥': 'whitefish'
    }

def process_animal_images():
    """Process all animal images according to the plan"""
    
    print("üêæ Creating Animal World Category")
    print("=" * 50)
    
    # Paths
    animals_en_dir = 'animals_en'
    animals_ru_dir = 'animals_ru'
    temp_ru_en_dir = 'temp_animals_ru_translated'
    final_animals_dir = 'data/images/animal_world'
    
    # Create directories
    os.makedirs(temp_ru_en_dir, exist_ok=True)
    os.makedirs(final_animals_dir, exist_ok=True)
    os.makedirs('data/words/ru', exist_ok=True)
    os.makedirs('data/words/en', exist_ok=True)
    
    # Step 1: Process Russian images
    print("\nüìù Step 1: Processing Russian animal images...")
    
    if not os.path.exists(animals_ru_dir):
        print(f"‚ùå Russian animals directory not found: {animals_ru_dir}")
        return
    
    ru_files = [f for f in os.listdir(animals_ru_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"Found {len(ru_files)} Russian animal images")
    
    translations = get_russian_to_english_translations()
    translated_count = 0
    
    for filename in ru_files:
        # Clean Russian filename
        cleaned_ru = clean_russian_filename(filename)
        print(f"  {filename} ‚Üí {cleaned_ru}")
        
        # Translate to English
        if cleaned_ru in translations:
            en_name = translations[cleaned_ru]
            
            # Copy image with English name
            src_path = os.path.join(animals_ru_dir, filename)
            dst_path = os.path.join(temp_ru_en_dir, f"{en_name}.jpg")
            
            try:
                # Convert and resize image
                with Image.open(src_path) as img:
                    img = img.convert('RGB')
                    img = img.resize((300, 300), Image.Resampling.LANCZOS)
                    img.save(dst_path, 'JPEG', quality=90, optimize=True)
                
                translated_count += 1
                print(f"    ‚úì Translated: {cleaned_ru} ‚Üí {en_name}")
                
            except Exception as e:
                print(f"    ‚ùå Error processing {filename}: {e}")
        else:
            print(f"    ‚ö†Ô∏è  No translation for: {cleaned_ru}")
    
    print(f"Successfully translated {translated_count} Russian images")
    
    # Step 2: Process English images
    print(f"\nüìù Step 2: Processing English animal images...")
    
    if not os.path.exists(animals_en_dir):
        print(f"‚ùå English animals directory not found: {animals_en_dir}")
        return
    
    en_files = [f for f in os.listdir(animals_en_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"Found {len(en_files)} English animal images")
    
    # Step 3: Merge without duplicates
    print(f"\nüìù Step 3: Merging images without duplicates...")
    
    final_animals = {}
    
    # Add English images first
    for filename in en_files:
        name = os.path.splitext(filename)[0].lower().replace(' ', '_')
        src_path = os.path.join(animals_en_dir, filename)
        
        try:
            # Convert and resize image
            with Image.open(src_path) as img:
                img = img.convert('RGB')
                img = img.resize((300, 300), Image.Resampling.LANCZOS)
                
                final_animals[name] = {
                    'source': 'english',
                    'original_name': filename,
                    'image': img.copy()
                }
                
        except Exception as e:
            print(f"    ‚ùå Error processing English {filename}: {e}")
    
    # Add translated Russian images (avoid duplicates)
    if os.path.exists(temp_ru_en_dir):
        ru_translated_files = [f for f in os.listdir(temp_ru_en_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
        
        for filename in ru_translated_files:
            name = os.path.splitext(filename)[0].lower()
            
            if name not in final_animals:
                src_path = os.path.join(temp_ru_en_dir, filename)
                
                try:
                    with Image.open(src_path) as img:
                        final_animals[name] = {
                            'source': 'russian_translated',
                            'original_name': filename,
                            'image': img.copy()
                        }
                        
                except Exception as e:
                    print(f"    ‚ùå Error processing translated {filename}: {e}")
            else:
                print(f"    ‚ö†Ô∏è  Duplicate skipped: {name}")
    
    print(f"Final collection: {len(final_animals)} unique animals")
    
    # Step 4: Number and save final images
    print(f"\nüìù Step 4: Numbering and saving final collection...")
    
    animal_list = []
    
    for index, (name, data) in enumerate(sorted(final_animals.items()), 1):
        # Create numbered filename
        image_code = f"ANIMAL-{index:03d}"
        image_filename = f"{image_code}.png"
        image_path = os.path.join(final_animals_dir, image_filename)
        
        # Save image
        try:
            data['image'].save(image_path, 'PNG', quality=95, optimize=True)
            
            # Add to list
            animal_list.append({
                'number': index,
                'name_en': name.replace('_', ' ').title(),
                'name_ru': name.replace('_', ' ').title(),  # Will need proper translation
                'code': image_code,
                'source': data['source']
            })
            
            print(f"  {index:3d}. {name.replace('_', ' ').title()} ‚Üí {image_code}")
            
        except Exception as e:
            print(f"    ‚ùå Error saving {name}: {e}")
    
    # Step 5: Create category files
    print(f"\nüìù Step 5: Creating category files...")
    
    # Create Russian word list
    ru_file_path = 'data/words/ru/animal_world.txt'
    with open(ru_file_path, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            f.write(f"{animal['number']} - {animal['name_ru'].upper()} - {animal['code']}\n")
    
    # Create English word list
    en_file_path = 'data/words/en/animal_world.txt'
    with open(en_file_path, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            f.write(f"{animal['number']} - {animal['name_en'].upper()} - {animal['code']}\n")
    
    # Create summary report
    print(f"\nüìä SUMMARY REPORT")
    print(f"=" * 50)
    print(f"Total unique animals: {len(animal_list)}")
    print(f"From English source: {len([a for a in animal_list if a['source'] == 'english'])}")
    print(f"From Russian source: {len([a for a in animal_list if a['source'] == 'russian_translated'])}")
    print(f"Images saved to: {final_animals_dir}")
    print(f"Russian words: {ru_file_path}")
    print(f"English words: {en_file_path}")
    
    # Analysis for missing elements
    print(f"\nüîç ANALYSIS FOR GAME REQUIREMENTS")
    print(f"=" * 50)
    
    if len(animal_list) >= 100:
        print(f"‚úÖ Excellent! {len(animal_list)} animals is more than enough for a great category")
    elif len(animal_list) >= 50:
        print(f"‚úÖ Good! {len(animal_list)} animals is sufficient for a solid category")
    elif len(animal_list) >= 25:
        print(f"‚ö†Ô∏è  {len(animal_list)} animals is minimal but workable")
    else:
        print(f"‚ùå {len(animal_list)} animals might be too few for a good game experience")
    
    print(f"\nRecommendations:")
    print(f"- Category name: '–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä' / 'Animal World'")
    print(f"- Difficulty: Medium (diverse animal types)")
    print(f"- Suitable for all age groups")
    
    # Clean up temporary directory
    if os.path.exists(temp_ru_en_dir):
        shutil.rmtree(temp_ru_en_dir)
        print(f"\nüßπ Cleaned up temporary files")
    
    print(f"\nüéâ Animal World category creation completed!")

if __name__ == "__main__":
    process_animal_images()