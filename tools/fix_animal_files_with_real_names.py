#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import shutil
import re
from PIL import Image

def clean_russian_name(filename):
    """Clean Russian filename from extra words"""
    name = os.path.splitext(filename)[0].lower()
    
    extra_words = [
        '_—Ñ–æ—Ç–æ', '—Ñ–æ—Ç–æ_', '—Ñ–æ—Ç–æ',
        '_–∂–∏–≤–æ—Ç–Ω–æ–µ', '–∂–∏–≤–æ—Ç–Ω–æ–µ_', '–∂–∏–≤–æ—Ç–Ω–æ–µ',
        '_—Ä—ã–±–∞', '—Ä—ã–±–∞_', '—Ä—ã–±–∞',
        '_—Å_–¥–µ—Ç–µ–Ω—ã—à–µ–º', '_—Å_–¥–µ—Ç–µ–Ω—ã—à–∞–º–∏',
        '_—â–µ–Ω–∫–∏', '—â–µ–Ω–∫–∏_', '_–¥–µ—Ç–µ–Ω—ã—à–∏', '–¥–µ—Ç–µ–Ω—ã—à–∏_',
        '_—Å–µ–º–µ–π—Å—Ç–≤–æ', '—Å–µ–º–µ–π—Å—Ç–≤–æ_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è_',
        '_–¥–∏–∫–∞—è', '–¥–∏–∫–∞—è_', '_–¥–∏–∫–∏–π', '–¥–∏–∫–∏–π_',
        '_–Ω–∞_–æ—Ö–æ—Ç–µ', '_–æ—Ö–æ—Ç–∞', '_—É–¥–∞—á–Ω–∞—è_–æ—Ö–æ—Ç–∞',
        '_—Å—Ç–∞—è', '—Å—Ç–∞—è_', '_–ø—Ä–∞–π–¥', '–ø—Ä–∞–π–¥_',
        '_–Ω–µ—Ä–µ—Å—Ç'
    ]
    
    for word in extra_words:
        name = name.replace(word, '')
    
    name = re.sub(r'_+', '_', name).strip('_')
    return name

def translate_to_english(ru_name):
    """Translate Russian animal name to English"""
    translations = {
        '–±–æ–ª—å—à–µ—É—Ö–∞—è_–ª–∏—Å–∏—Ü–∞': 'bat_eared_fox',
        '–±–µ–ª–∞—è_–∞–∫—É–ª–∞': 'great_white_shark',
        '–±–µ–ª–∞—è_–∞–∫—É–ª–∞_–∫–∞—Ä—Ö–∞—Ä–æ–¥–æ–Ω': 'great_white_shark',
        '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π_–ª–µ–≤': 'barbary_lion',
        '–±—ã—á—å—è_–∞–∫—É–ª–∞': 'bull_shark',
        '—Ç–∏–≥—Ä–æ–≤–∞—è_–∞–∫—É–ª–∞': 'tiger_shark',
        '–∫–∏—Ç–æ–≤–∞—è_–∞–∫—É–ª–∞': 'whale_shark',
        '–∞–∫—É–ª–∞-–º–æ–ª–æ—Ç': 'hammerhead_shark',
        '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'sixgill_shark',
        '–ø–æ–ª—è—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'greenland_shark',
        '–∞–∫—É–ª–∞-–±—ã–∫': 'bull_shark',
        '—Å–µ—Ä—ã–π_–≤–æ–ª–∫': 'gray_wolf',
        '–∫—Ä–∞—Å–Ω—ã–π_–≤–æ–ª–∫': 'red_wolf',
        '–∞–∑–∏–∞—Ç—Å–∫–∏–π_–ª–µ–≤': 'asiatic_lion',
        '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π_–ª–µ–≤': 'african_lion',
        '–µ–Ω–æ—Ç_–ø–æ–ª–æ—Å–∫—É–Ω': 'raccoon',
        '–µ–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω': 'raccoon',
        '–µ–Ω–æ—Ç_—Ä–∞–∫–æ–µ–¥': 'crab_eating_raccoon',
        '–µ–Ω–æ—Ç-—Ä–∞–∫–æ–µ–¥': 'crab_eating_raccoon',
        '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è_–Ω–æ—Ä–∫–∞': 'european_mink',
        '–≤–æ–¥—è–Ω–æ–π_–º–∞–Ω–≥—É—Å—Ç': 'marsh_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç-–∫—Ä–∞–±–æ–µ–¥': 'crab_eating_mongoose',
        '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'african_wild_dog',
        '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'raccoon_dog',
        '–¥–∏–∫–∞—è_—Å–æ–±–∞–∫–∞_–¥–∏–Ω–≥–æ': 'dingo',
        '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫': 'sea_horse',
        '–º–æ—Ä—Å–∫–∏–µ_–∫–æ–Ω—å–∫–∏': 'sea_horse',
        '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_—É–≥–æ—Ä—å': 'electric_eel',
        '–∏–ª–∏—Å—Ç—ã–π_–ø—Ä—ã–≥—É–Ω': 'mudskipper',
        '—á–∏–ª–∏–π—Å–∫–∞—è_–∫–æ—à–∫–∞': 'jungle_cat',
        '—ç—Ñ–∏–æ–ø—Å–∫–∏–π_—à–∞–∫–∞–ª': 'ethiopian_wolf',
        '–∏—Ä–±–∏—Å': 'snow_leopard',
        '—Ä—ã–∂–∞—è_–ª–∏—Å–∏—Ü–∞': 'red_fox',
        '—Å—Ç–µ–ø–Ω–∞—è_–ª–∏—Å–∏—Ü–∞': 'fox',
        '–∑–æ–ª–æ—Ç–æ–π_–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '—Ä—ã–±–∞_–º–µ—á': 'swordfish',
        '–º–µ—á_—Ä—ã–±–∞': 'swordfish',
        '—Å–æ–ª–Ω–µ—á–Ω–∞—è_—Ä—ã–±–∞': 'sunfish',
        '—Ä—ã–±–∞_—Ç–æ–ø–æ—Ä–∏–∫': 'hatchetfish',
        '–±—ã—Å—Ç—Ä—è–Ω–∫–∞': 'spirlin',
        '–≥–æ—Ä–±—É—à–∞': 'pink_salmon',
        '—É–∫–ª–µ–π–∫–∞': 'bleak',
        '—â—É–∫–∞': 'pike',
        '—Å—É–¥–∞–∫': 'zander',
        '–±–µ—Ä—à': 'volga_zander',
        '–≤–æ–ª–∂—Å–∫–∏–π_—Å—É–¥–∞–∫': 'volga_zander',
        '–±—ë—Ä—à': 'volga_zander',
        '–µ–ª–µ—Ü': 'dace',
        '—è–∑—å': 'ide',
        '—Å–∏–≥': 'whitefish',
        '–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '–≤—ã–¥—Ä–∞': 'otter',
        '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è_–≤—ã–¥—Ä–∞': 'otter',
        '–¥–∏–Ω–≥–æ': 'dingo',
        '–æ—Ü–µ–ª–æ—Ç': 'ocelot',
        '—Å–æ–±–æ–ª—å': 'sable',
        '—à–∞–∫–∞–ª': 'jackal',
        '–∫–æ–π–æ—Ç': 'coyote',
        '–º–∞–Ω–≥—É—Å—Ç': 'mongoose',
        '–ª–µ–æ–ø–∞—Ä–¥': 'leopard',
        '–ª–µ–≤': 'lion',
        '–≤–æ–ª–∫': 'wolf',
        '–ª–∏—Å–∏—Ü–∞': 'fox',
        '–∫–æ—à–∫–∞': 'cat',
        '—Å–æ–±–∞–∫–∞': 'dog',
        '–∞–∫—É–ª–∞': 'shark'
    }
    
    return translations.get(ru_name)

def normalize_name(name):
    """Normalize name for comparison"""
    return name.lower().replace(' ', '_').replace('-', '_')

def create_animal_world_with_real_names():
    """Create animal world with real file names and numbers"""
    
    print("üêæ Creating Animal World with REAL file names")
    print("=" * 50)
    
    # Clear existing directory
    animal_dir = 'data/images/animal_world'
    if os.path.exists(animal_dir):
        shutil.rmtree(animal_dir)
        print(f"Cleared existing directory: {animal_dir}")
    
    os.makedirs(animal_dir, exist_ok=True)
    os.makedirs('data/words/ru', exist_ok=True)
    os.makedirs('data/words/en', exist_ok=True)
    
    # Get file lists
    en_files = [f for f in os.listdir('animals_en') if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    ru_files = [f for f in os.listdir('animals_ru') if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    print(f"English files: {len(en_files)}")
    print(f"Russian files: {len(ru_files)}")
    
    # Process Russian files
    russian_animals = {}
    for filename in ru_files:
        cleaned = clean_russian_name(filename)
        translated = translate_to_english(cleaned)
        
        if translated:
            normalized = normalize_name(translated)
            if normalized not in russian_animals:
                russian_animals[normalized] = {
                    'filename': filename,
                    'cleaned_ru': cleaned,
                    'translated_en': translated,
                    'normalized': normalized
                }
    
    # Process English files
    english_animals = {}
    for filename in en_files:
        name = os.path.splitext(filename)[0]
        normalized = normalize_name(name)
        english_animals[normalized] = {
            'filename': filename,
            'display_name': name,
            'normalized': normalized
        }
    
    # Merge without duplicates
    final_animals = {}
    duplicates = []
    
    # Add English first (priority)
    for norm_name, data in english_animals.items():
        final_animals[norm_name] = {
            'source': 'english',
            'filename': data['filename'],
            'display_name': data['display_name'],
            'file_name': norm_name  # For file naming
        }
    
    # Add Russian (only if not duplicate)
    for norm_name, data in russian_animals.items():
        if norm_name in english_animals:
            duplicates.append(norm_name)
        else:
            final_animals[norm_name] = {
                'source': 'russian',
                'filename': data['filename'],
                'display_name': data['translated_en'],
                'file_name': norm_name  # For file naming
            }
    
    print(f"Final unique animals: {len(final_animals)}")
    print(f"Duplicates removed: {len(duplicates)}")
    
    # Create numbered files with real names
    animal_list = []
    
    for index, (norm_name, data) in enumerate(sorted(final_animals.items()), 1):
        # Create file name: 001-aardvark.png
        file_name = f"{index:03d}-{data['file_name']}.png"
        file_path = os.path.join(animal_dir, file_name)
        
        # Copy and resize image
        if data['source'] == 'english':
            src_path = os.path.join('animals_en', data['filename'])
        else:
            src_path = os.path.join('animals_ru', data['filename'])
        
        try:
            with Image.open(src_path) as img:
                img = img.convert('RGB')
                img = img.resize((300, 300), Image.Resampling.LANCZOS)
                img.save(file_path, 'PNG', quality=95, optimize=True)
            
            animal_list.append({
                'number': index,
                'name': data['display_name'],
                'file_name': file_name,
                'source': data['source']
            })
            
            print(f"  {index:3d}. {data['display_name']} ‚Üí {file_name} ({data['source']})")
            
        except Exception as e:
            print(f"Error processing {data['filename']}: {e}")
    
    # Create word files with real file names
    en_file = 'data/words/en/animal_world.txt'
    with open(en_file, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            f.write(f"{animal['number']} - {animal['name'].upper()} - {animal['file_name']}\n")
    
    ru_file = 'data/words/ru/animal_world.txt'
    with open(ru_file, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            # For Russian, we'll need proper translations later
            f.write(f"{animal['number']} - {animal['name'].upper()} - {animal['file_name']}\n")
    
    print(f"\n‚úÖ SUCCESS!")
    print(f"Created {len(animal_list)} animals with real file names")
    print(f"Files: 001-aardvark.png to {len(animal_list):03d}-{animal_list[-1]['file_name'].split('-', 1)[1]}")
    print(f"English file: {en_file}")
    print(f"Russian file: {ru_file}")
    
    # Show examples
    print(f"\nExamples of created files:")
    for animal in animal_list[:5]:
        print(f"  {animal['file_name']} - {animal['name']}")

if __name__ == "__main__":
    create_animal_world_with_real_names() 