#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json

def test_animal_category():
    """Comprehensive test of animal category configuration"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ñ–ò–í–û–¢–ù–´–ô –ú–ò–†")
    print("=" * 50)
    
    errors = []
    warnings = []
    success_count = 0
    
    # 1. Check main config file
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config_file = 'data/config/categories.json'
    if os.path.exists(config_file):
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        animals_category = None
        for cat in config['categories']:
            if cat['id'] == 'animals':
                animals_category = cat
                break
        
        if animals_category:
            print("   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 'animals' –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ (RU): {animals_category['names']['ru']}")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ (EN): {animals_category['names']['en']}")
            print(f"   üìÅ –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {animals_category['imageFolder']}")
            
            # Check correct names
            expected_names = {
                'ru': '–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä',
                'en': 'Animal World',
                'es': 'Mundo Animal',
                'fr': 'Monde Animal'
            }
            
            names_correct = True
            for lang, expected_name in expected_names.items():
                actual_name = animals_category['names'].get(lang, '')
                if actual_name == expected_name:
                    print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ {lang.upper()}: {actual_name}")
                    success_count += 1
                else:
                    errors.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {lang.upper()}: '{actual_name}', –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}'")
                    names_correct = False
            
            if names_correct:
                success_count += 1
            
            # Check if files exist
            for lang, filename in animals_category['wordFiles'].items():
                filepath = f"data/words/{lang}/{filename}"
                if os.path.exists(filepath):
                    print(f"   ‚úÖ –§–∞–π–ª —Å–ª–æ–≤ {lang}: {filename}")
                    success_count += 1
                else:
                    errors.append(f"–§–∞–π–ª —Å–ª–æ–≤ {lang} –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        else:
            errors.append("–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'animals' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    else:
        errors.append(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
    
    # 2. Check image folder
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    images_dir = 'data/images/animals'
    if os.path.exists(images_dir):
        images = [f for f in os.listdir(images_dir) if f.endswith('.png')]
        images.sort()  # Sort to ensure consistent order
        if images:
            print(f"   ‚úÖ –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–∞: {len(images)} —Ñ–∞–π–ª–æ–≤")
            print(f"   üìä –î–∏–∞–ø–∞–∑–æ–Ω: {images[0]} ... {images[-1]}")
            success_count += 1
        else:
            errors.append("–ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞")
    else:
        errors.append(f"–ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {images_dir}")
    
    # 3. Check word files content
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ —Å–ª–æ–≤...")
    languages = ['ru', 'en', 'es', 'fr']
    expected_translations = {
        'ru': '–¢–†–£–ë–ö–û–ó–£–ë',  # Should be Russian
        'en': 'AARDVARK',   # Should be English
        'es': 'OSO HORMIGUERO',  # Should be Spanish
        'fr': 'ORYCT√âROPE'  # Should be French
    }
    
    for lang in languages:
        file_path = f'data/words/{lang}/animals_COMPLETE.txt'
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            if lines:
                first_line = lines[0].strip()
                parts = first_line.split(' - ')
                if len(parts) >= 2:
                    first_word = parts[1].strip()
                    expected = expected_translations[lang]
                    if first_word == expected:
                        print(f"   ‚úÖ {lang.upper()}: {len(lines)} —Å–ª–æ–≤, –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {first_word}")
                        success_count += 1
                    else:
                        warnings.append(f"{lang.upper()}: –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ '{first_word}', –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}'")
                else:
                    errors.append(f"{lang.upper()}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
            else:
                errors.append(f"{lang.upper()}: –§–∞–π–ª –ø—É—Å—Ç")
        else:
            errors.append(f"{lang.upper()}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # 4. Check image mappings
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    for lang in languages:
        mapping_file = f'data/image_mappings/animals_{lang}.json'
        if os.path.exists(mapping_file):
            with open(mapping_file, 'r', encoding='utf-8') as f:
                mappings = json.load(f)
            
            # Check first mapping
            if '1' in mappings:
                first_path = mappings['1']
                if first_path.startswith('animals/'):
                    print(f"   ‚úÖ {lang.upper()}: {len(mappings)} –º–∞–ø–ø–∏–Ω–≥–æ–≤, –ø—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
                    success_count += 1
                else:
                    errors.append(f"{lang.upper()}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {first_path}")
            else:
                errors.append(f"{lang.upper()}: –ú–∞–ø–ø–∏–Ω–≥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å—å '1'")
        else:
            errors.append(f"{lang.upper()}: –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {mapping_file}")
    
    # 5. Check for old wrong files
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    wrong_files = [
        'data/categories.json',
        'data/image_mappings/animal_world_ru.json',
        'data/words/ru/animal_world.txt'
    ]
    
    for wrong_file in wrong_files:
        if os.path.exists(wrong_file):
            warnings.append(f"–ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª: {wrong_file}")
        else:
            print(f"   ‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {wrong_file}")
            success_count += 1
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {success_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    
    if errors:
        print("\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
    
    if warnings:
        print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
    
    if not errors:
        print(f"\nüéâ –í–°–Å –û–¢–õ–ò–ß–ù–û! –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print(f"   üåê –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
        print(f"   üîß –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: http://localhost:8000/tools/debug.html")
    else:
        print(f"\nüîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {len(errors)} –æ—à–∏–±–æ–∫")
    
    return len(errors) == 0

if __name__ == "__main__":
    test_animal_category() 