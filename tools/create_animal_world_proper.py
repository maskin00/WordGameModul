#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Create "Animal World" category following the exact 6-step plan:
1. Clean Russian filenames from extra words ("—Ñ–æ—Ç–æ", "–∂–∏–≤–æ—Ç–Ω–æ–µ", etc.)
2. Translate cleaned Russian names to English
3. Compare/merge English and translated Russian images WITHOUT duplicates
4. Number final unified collection with English names
5. Create "–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä" (Animal World) category
6. Analyze sufficiency for game requirements
"""

import os
import shutil
import re
from PIL import Image

def clean_russian_filename(filename):
    """Step 1: Clean Russian filename from extra words"""
    name = os.path.splitext(filename)[0]
    
    # Remove common extra words
    extra_words = [
        '_—Ñ–æ—Ç–æ', '—Ñ–æ—Ç–æ_', '—Ñ–æ—Ç–æ',
        '_–∂–∏–≤–æ—Ç–Ω–æ–µ', '–∂–∏–≤–æ—Ç–Ω–æ–µ_', '–∂–∏–≤–æ—Ç–Ω–æ–µ',
        '_—Ä—ã–±–∞', '—Ä—ã–±–∞_', '—Ä—ã–±–∞',
        '_–∫–æ—à–∫–∞', '–∫–æ—à–∫–∞_', 
        '_—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫–∞_',
        '_—Å_–¥–µ—Ç–µ–Ω—ã—à–µ–º', '_—Å_–¥–µ—Ç–µ–Ω—ã—à–∞–º–∏',
        '_—â–µ–Ω–∫–∏', '—â–µ–Ω–∫–∏_',
        '_–¥–µ—Ç–µ–Ω—ã—à–∏', '–¥–µ—Ç–µ–Ω—ã—à–∏_',
        '_—Å–µ–º–µ–π—Å—Ç–≤–æ', '—Å–µ–º–µ–π—Å—Ç–≤–æ_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è_',
        '_–¥–∏–∫–∞—è', '–¥–∏–∫–∞—è_',
        '_–¥–∏–∫–∏–π', '–¥–∏–∫–∏–π_',
        '_—Ö–∏—â–Ω—ã–µ', '—Ö–∏—â–Ω—ã–µ_',
        '_–Ω–∞_–æ—Ö–æ—Ç–µ', '_–æ—Ö–æ—Ç–∞',
        '_—É–¥–∞—á–Ω–∞—è_–æ—Ö–æ—Ç–∞',
        '_—Å—Ç–∞—è', '—Å—Ç–∞—è_',
        '_–ø—Ä–∞–π–¥', '–ø—Ä–∞–π–¥_',
        '_–Ω–µ—Ä–µ—Å—Ç'
    ]
    
    cleaned = name.lower()
    for word in extra_words:
        cleaned = cleaned.replace(word, '')
    
    # Remove multiple underscores and clean up
    cleaned = re.sub(r'_+', '_', cleaned)
    cleaned = cleaned.strip('_')
    
    # Specific animal handling
    if '–∞–∫—É–ª–∞' in cleaned:
        if '–±—ã—á—å—è' in cleaned or '—Ç—É–ø–æ—Ä—ã–ª–∞—è' in cleaned:
            cleaned = '–±—ã—á—å—è_–∞–∫—É–ª–∞'
        elif '—Ç–∏–≥—Ä–æ–≤–∞—è' in cleaned:
            cleaned = '—Ç–∏–≥—Ä–æ–≤–∞—è_–∞–∫—É–ª–∞'
        elif '–±–µ–ª–∞—è' in cleaned or '–∫–∞—Ä—Ö–∞—Ä–æ–¥–æ–Ω' in cleaned:
            cleaned = '–±–µ–ª–∞—è_–∞–∫—É–ª–∞'
        elif '–∫–∏—Ç–æ–≤–∞—è' in cleaned:
            cleaned = '–∫–∏—Ç–æ–≤–∞—è_–∞–∫—É–ª–∞'
        elif '–º–æ–ª–æ—Ç' in cleaned:
            cleaned = '–∞–∫—É–ª–∞_–º–æ–ª–æ—Ç'
        elif '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è' in cleaned:
            cleaned = '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è_–∞–∫—É–ª–∞'
        elif '–ø–æ–ª—è—Ä–Ω–∞—è' in cleaned:
            cleaned = '–ø–æ–ª—è—Ä–Ω–∞—è_–∞–∫—É–ª–∞'
        else:
            cleaned = '–∞–∫—É–ª–∞'
    elif '–ª–µ–≤' in cleaned:
        if '–∞–∑–∏–∞—Ç—Å–∫–∏–π' in cleaned:
            cleaned = '–∞–∑–∏–∞—Ç—Å–∫–∏–π_–ª–µ–≤'
        elif '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π' in cleaned:
            cleaned = '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π_–ª–µ–≤'
        elif '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π' in cleaned:
            cleaned = '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π_–ª–µ–≤'
        else:
            cleaned = '–ª–µ–≤'
    elif '–≤–æ–ª–∫' in cleaned:
        if '—Å–µ—Ä—ã–π' in cleaned:
            cleaned = '—Å–µ—Ä—ã–π_–≤–æ–ª–∫'
        else:
            cleaned = '–≤–æ–ª–∫'
    elif '—Å—É–¥–∞–∫' in cleaned:
        if '–≤–æ–ª–∂—Å–∫–∏–π' in cleaned or '–±—ë—Ä—à' in cleaned or '–±–µ—Ä—à' in cleaned:
            cleaned = '–±–µ—Ä—à'
        else:
            cleaned = '—Å—É–¥–∞–∫'
    elif '–µ–Ω–æ—Ç' in cleaned:
        if '—Ä–∞–∫–æ–µ–¥' in cleaned:
            cleaned = '–µ–Ω–æ—Ç_—Ä–∞–∫–æ–µ–¥'
        elif '–ø–æ–ª–æ—Å–∫—É–Ω' in cleaned:
            cleaned = '–µ–Ω–æ—Ç_–ø–æ–ª–æ—Å–∫—É–Ω'
        else:
            cleaned = '–µ–Ω–æ—Ç'
    elif '–Ω–æ—Ä–∫–∞' in cleaned:
        if '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è' in cleaned:
            cleaned = '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è_–Ω–æ—Ä–∫–∞'
        else:
            cleaned = '–Ω–æ—Ä–∫–∞'
    elif '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫' in cleaned or '–º–æ—Ä—Å–∫–∏–µ_–∫–æ–Ω—å–∫–∏' in cleaned:
        cleaned = '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫'
    elif '—É–≥–æ—Ä—å' in cleaned:
        if '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π' in cleaned:
            cleaned = '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_—É–≥–æ—Ä—å'
        else:
            cleaned = '—É–≥–æ—Ä—å'
    elif '–ø—Ä—ã–≥—É–Ω' in cleaned and '–∏–ª–∏—Å—Ç—ã–π' in cleaned:
        cleaned = '–∏–ª–∏—Å—Ç—ã–π_–ø—Ä—ã–≥—É–Ω'
    elif '–∫–∞—Ä–∞—Å—å' in cleaned:
        if '–∑–æ–ª–æ—Ç–æ–π' in cleaned:
            cleaned = '–∑–æ–ª–æ—Ç–æ–π_–∫–∞—Ä–∞—Å—å'
        else:
            cleaned = '–∫–∞—Ä–∞—Å—å'
    elif '–ª–∏—Å–∏—Ü–∞' in cleaned:
        if '–±–æ–ª—å—à–µ—É—Ö–∞—è' in cleaned:
            cleaned = '–±–æ–ª—å—à–µ—É—Ö–∞—è_–ª–∏—Å–∏—Ü–∞'
        else:
            cleaned = '–ª–∏—Å–∏—Ü–∞'
    elif '–∫–æ—à–∫–∞' in cleaned:
        if '—á–∏–ª–∏–π—Å–∫–∞—è' in cleaned:
            cleaned = '—á–∏–ª–∏–π—Å–∫–∞—è_–∫–æ—à–∫–∞'
        else:
            cleaned = '–∫–æ—à–∫–∞'
    elif '—Å–æ–±–∞–∫–∞' in cleaned:
        if '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è' in cleaned:
            cleaned = '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞'
        elif '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è' in cleaned:
            cleaned = '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞'
        else:
            cleaned = '—Å–æ–±–∞–∫–∞'
    
    # Handle fish names
    fish_names = {
        '—É–∫–ª–µ–π–∫–∞': '—É–∫–ª–µ–π–∫–∞',
        '–≥–æ—Ä–±—É—à–∞': '–≥–æ—Ä–±—É—à–∞',
        '–±—ã—Å—Ç—Ä—è–Ω–∫–∞': '–±—ã—Å—Ç—Ä—è–Ω–∫–∞',
        '—è–∑—å': '—è–∑—å',
        '–µ–ª–µ—Ü': '–µ–ª–µ—Ü',
        '—Å–∏–≥': '—Å–∏–≥',
        '–º–µ—á': '—Ä—ã–±–∞_–º–µ—á',
        '—Ç–æ–ø–æ—Ä–∏–∫': '—Ä—ã–±–∞_—Ç–æ–ø–æ—Ä–∏–∫',
        '—Å–æ–ª–Ω–µ—á–Ω–∞—è': '—Å–æ–ª–Ω–µ—á–Ω–∞—è_—Ä—ã–±–∞'
    }
    
    for fish, name in fish_names.items():
        if fish in cleaned:
            cleaned = name
            break
    
    return cleaned

def get_russian_to_english_translations():
    """Step 2: Russian to English translations"""
    return {
        '–±—ã—á—å—è_–∞–∫—É–ª–∞': 'bull_shark',
        '—Ç–∏–≥—Ä–æ–≤–∞—è_–∞–∫—É–ª–∞': 'tiger_shark',
        '–±–µ–ª–∞—è_–∞–∫—É–ª–∞': 'great_white_shark',
        '–∫–∏—Ç–æ–≤–∞—è_–∞–∫—É–ª–∞': 'whale_shark',
        '–∞–∫—É–ª–∞_–º–æ–ª–æ—Ç': 'hammerhead_shark',
        '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'sixgill_shark',
        '–ø–æ–ª—è—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'greenland_shark',
        '–∞–∫—É–ª–∞': 'shark',
        '–∞–∑–∏–∞—Ç—Å–∫–∏–π_–ª–µ–≤': 'asiatic_lion',
        '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π_–ª–µ–≤': 'african_lion',
        '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π_–ª–µ–≤': 'barbary_lion',
        '–ª–µ–≤': 'lion',
        '—Å–µ—Ä—ã–π_–≤–æ–ª–∫': 'gray_wolf',
        '–≤–æ–ª–∫': 'wolf',
        '–±–µ—Ä—à': 'volga_zander',
        '—Å—É–¥–∞–∫': 'zander',
        '–µ–Ω–æ—Ç_—Ä–∞–∫–æ–µ–¥': 'crab_eating_raccoon',
        '–µ–Ω–æ—Ç_–ø–æ–ª–æ—Å–∫—É–Ω': 'raccoon',
        '–µ–Ω–æ—Ç': 'raccoon',
        '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è_–Ω–æ—Ä–∫–∞': 'european_mink',
        '–Ω–æ—Ä–∫–∞': 'mink',
        '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫': 'seahorse',
        '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_—É–≥–æ—Ä—å': 'electric_eel',
        '—É–≥–æ—Ä—å': 'eel',
        '–∏–ª–∏—Å—Ç—ã–π_–ø—Ä—ã–≥—É–Ω': 'mudskipper',
        '–∑–æ–ª–æ—Ç–æ–π_–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '–±–æ–ª—å—à–µ—É—Ö–∞—è_–ª–∏—Å–∏—Ü–∞': 'bat_eared_fox',
        '–ª–∏—Å–∏—Ü–∞': 'fox',
        '—á–∏–ª–∏–π—Å–∫–∞—è_–∫–æ—à–∫–∞': 'jungle_cat',
        '–∫–æ—à–∫–∞': 'cat',
        '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'african_wild_dog',
        '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'raccoon_dog',
        '—Å–æ–±–∞–∫–∞': 'dog',
        '—É–∫–ª–µ–π–∫–∞': 'bleak',
        '–≥–æ—Ä–±—É—à–∞': 'pink_salmon',
        '–±—ã—Å—Ç—Ä—è–Ω–∫–∞': 'spirlin',
        '—è–∑—å': 'ide',
        '–µ–ª–µ—Ü': 'dace',
        '—Å–∏–≥': 'whitefish',
        '—Ä—ã–±–∞_–º–µ—á': 'swordfish',
        '—Ä—ã–±–∞_—Ç–æ–ø–æ—Ä–∏–∫': 'hatchetfish',
        '—Å–æ–ª–Ω–µ—á–Ω–∞—è_—Ä—ã–±–∞': 'sunfish',
        '—â—É–∫–∞': 'pike',
        '–≤—ã–¥—Ä–∞': 'otter',
        '–¥–∏–Ω–≥–æ': 'dingo',
        '–æ—Ü–µ–ª–æ—Ç': 'ocelot',
        '—Å–æ–±–æ–ª—å': 'sable',
        '—à–∞–∫–∞–ª': 'jackal',
        '—ç—Ñ–∏–æ–ø—Å–∫–∏–π_—à–∞–∫–∞–ª': 'ethiopian_wolf',
        '–∫–æ–π–æ—Ç': 'coyote',
        '–≤–æ–¥—è–Ω–æ–π_–º–∞–Ω–≥—É—Å—Ç': 'marsh_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç_–∫—Ä–∞–±–æ–µ–¥': 'crab_eating_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç': 'mongoose',
        '–∏—Ä–±–∏—Å': 'snow_leopard',
        '–ª–µ–æ–ø–∞—Ä–¥': 'leopard'
    }

def process_according_to_plan():
    """Execute the 6-step plan exactly"""
    
    print("üêæ Creating Animal World Category - Following 6-Step Plan")
    print("=" * 60)
    
    # Paths
    animals_en_dir = 'animals_en'
    animals_ru_dir = 'animals_ru'
    final_animals_dir = 'data/images/animal_world'
    
    # Create directories
    os.makedirs(final_animals_dir, exist_ok=True)
    os.makedirs('data/words/ru', exist_ok=True)
    os.makedirs('data/words/en', exist_ok=True)
    
    # STEP 1 & 2: Process Russian images - Clean and Translate
    print("\nüìù STEP 1-2: Processing Russian images (Clean + Translate)")
    print("-" * 50)
    
    if not os.path.exists(animals_ru_dir):
        print(f"‚ùå Russian animals directory not found: {animals_ru_dir}")
        return
    
    ru_files = [f for f in os.listdir(animals_ru_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"Found {len(ru_files)} Russian animal images")
    
    translations = get_russian_to_english_translations()
    translated_animals = {}
    
    for filename in ru_files:
        # Step 1: Clean Russian filename
        cleaned_ru = clean_russian_filename(filename)
        
        # Step 2: Translate to English
        if cleaned_ru in translations:
            en_name = translations[cleaned_ru]
            
            # Store for merging (avoid duplicates within Russian set)
            if en_name not in translated_animals:
                translated_animals[en_name] = {
                    'source': 'russian_translated',
                    'original_file': filename,
                    'cleaned_ru': cleaned_ru
                }
                print(f"  ‚úì {filename} ‚Üí {cleaned_ru} ‚Üí {en_name}")
            else:
                print(f"  ‚ö†Ô∏è  Duplicate in Russian set: {en_name} (skipping {filename})")
        else:
            print(f"  ‚ùå No translation for: {cleaned_ru} (from {filename})")
    
    print(f"Successfully processed {len(translated_animals)} unique Russian animals")
    
    # STEP 3: Process English images and Merge without duplicates
    print(f"\nüìù STEP 3: Processing English images and Merging")
    print("-" * 50)
    
    if not os.path.exists(animals_en_dir):
        print(f"‚ùå English animals directory not found: {animals_en_dir}")
        return
    
    en_files = [f for f in os.listdir(animals_en_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"Found {len(en_files)} English animal images")
    
    final_animals = {}
    
    # Add English images first (they have priority)
    for filename in en_files:
        name = os.path.splitext(filename)[0].lower().replace(' ', '_')
        final_animals[name] = {
            'source': 'english',
            'original_file': filename
        }
        print(f"  ‚úì English: {filename} ‚Üí {name}")
    
    # Add translated Russian images (only if not duplicate)
    duplicates_count = 0
    for en_name, data in translated_animals.items():
        if en_name not in final_animals:
            final_animals[en_name] = data
            print(f"  ‚úì Added Russian: {data['cleaned_ru']} ‚Üí {en_name}")
        else:
            duplicates_count += 1
            print(f"  ‚ö†Ô∏è  Duplicate removed: {en_name} (Russian version skipped)")
    
    print(f"\nMerging results:")
    print(f"  English animals: {len(en_files)}")
    print(f"  Russian animals (translated): {len(translated_animals)}")
    print(f"  Duplicates removed: {duplicates_count}")
    print(f"  Final unique animals: {len(final_animals)}")
    
    # STEP 4: Number final unified collection
    print(f"\nüìù STEP 4: Numbering final unified collection")
    print("-" * 50)
    
    animal_list = []
    
    for index, (name, data) in enumerate(sorted(final_animals.items()), 1):
        # Create numbered filename
        image_code = f"ANIMAL-{index:03d}"
        image_filename = f"{image_code}.png"
        image_path = os.path.join(final_animals_dir, image_filename)
        
        # Load and save image
        try:
            if data['source'] == 'english':
                src_path = os.path.join(animals_en_dir, data['original_file'])
            else:
                src_path = os.path.join(animals_ru_dir, data['original_file'])
            
            with Image.open(src_path) as img:
                img = img.convert('RGB')
                img = img.resize((300, 300), Image.Resampling.LANCZOS)
                img.save(image_path, 'PNG', quality=95, optimize=True)
            
            # Add to list
            animal_list.append({
                'number': index,
                'name_en': name.replace('_', ' ').title(),
                'name_ru': data.get('cleaned_ru', name).replace('_', ' ').title(),
                'code': image_code,
                'source': data['source']
            })
            
            print(f"  {index:3d}. {name.replace('_', ' ').title()} ‚Üí {image_code} ({data['source']})")
            
        except Exception as e:
            print(f"    ‚ùå Error processing {name}: {e}")
    
    # STEP 5: Create "–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä" category
    print(f"\nüìù STEP 5: Creating '–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä' (Animal World) category")
    print("-" * 50)
    
    # Create English word list
    en_file_path = 'data/words/en/animal_world.txt'
    with open(en_file_path, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            f.write(f"{animal['number']} - {animal['name_en'].upper()} - {animal['code']}\n")
    
    # Create Russian word list (will need proper Russian translations later)
    ru_file_path = 'data/words/ru/animal_world.txt'
    with open(ru_file_path, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            # For now, use cleaned Russian names where available
            ru_name = animal['name_ru'] if animal['source'] == 'russian_translated' else animal['name_en']
            f.write(f"{animal['number']} - {ru_name.upper()} - {animal['code']}\n")
    
    print(f"‚úÖ Created category files:")
    print(f"  English: {en_file_path}")
    print(f"  Russian: {ru_file_path}")
    
    # STEP 6: Analyze sufficiency for game requirements
    print(f"\nüìù STEP 6: Analysis for game requirements")
    print("-" * 50)
    
    print(f"üìä FINAL RESULTS:")
    print(f"  Total unique animals: {len(animal_list)}")
    print(f"  From English source: {len([a for a in animal_list if a['source'] == 'english'])}")
    print(f"  From Russian source: {len([a for a in animal_list if a['source'] == 'russian_translated'])}")
    print(f"  Images saved to: {final_animals_dir}")
    
    if len(animal_list) >= 200:
        print(f"‚úÖ EXCELLENT! {len(animal_list)} animals is perfect for a comprehensive category")
    elif len(animal_list) >= 100:
        print(f"‚úÖ VERY GOOD! {len(animal_list)} animals is more than enough for a great category")
    elif len(animal_list) >= 50:
        print(f"‚úÖ GOOD! {len(animal_list)} animals is sufficient for a solid category")
    else:
        print(f"‚ö†Ô∏è  {len(animal_list)} animals might be minimal")
    
    print(f"\nüéâ 6-Step Plan Completed Successfully!")
    print(f"Category '–ñ–∏–≤–æ—Ç–Ω—ã–π –º–∏—Ä' / 'Animal World' is ready!")

if __name__ == "__main__":
    process_according_to_plan() 