#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Create Animal World category using REAL file names from directories
Following the 6-step plan with actual file names
"""

import os
import shutil
import re
from PIL import Image

def clean_russian_filename(filename):
    """Clean Russian filename from extra words"""
    name = os.path.splitext(filename)[0].lower()
    
    # Remove extra words
    extra_words = [
        '_—Ñ–æ—Ç–æ', '—Ñ–æ—Ç–æ_', '—Ñ–æ—Ç–æ',
        '_–∂–∏–≤–æ—Ç–Ω–æ–µ', '–∂–∏–≤–æ—Ç–Ω–æ–µ_', '–∂–∏–≤–æ—Ç–Ω–æ–µ',
        '_—Ä—ã–±–∞', '—Ä—ã–±–∞_', '—Ä—ã–±–∞',
        '_—Å_–¥–µ—Ç–µ–Ω—ã—à–µ–º', '_—Å_–¥–µ—Ç–µ–Ω—ã—à–∞–º–∏',
        '_—â–µ–Ω–∫–∏', '—â–µ–Ω–∫–∏_',
        '_–¥–µ—Ç–µ–Ω—ã—à–∏', '–¥–µ—Ç–µ–Ω—ã—à–∏_',
        '_—Å–µ–º–µ–π—Å—Ç–≤–æ', '—Å–µ–º–µ–π—Å—Ç–≤–æ_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π_',
        '_–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è', '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è_',
        '_–¥–∏–∫–∞—è', '–¥–∏–∫–∞—è_', '_–¥–∏–∫–∏–π', '–¥–∏–∫–∏–π_',
        '_–Ω–∞_–æ—Ö–æ—Ç–µ', '_–æ—Ö–æ—Ç–∞', '_—É–¥–∞—á–Ω–∞—è_–æ—Ö–æ—Ç–∞',
        '_—Å—Ç–∞—è', '—Å—Ç–∞—è_', '_–ø—Ä–∞–π–¥', '–ø—Ä–∞–π–¥_',
        '_–Ω–µ—Ä–µ—Å—Ç'
    ]
    
    for word in extra_words:
        name = name.replace(word, '')
    
    # Clean up underscores
    name = re.sub(r'_+', '_', name).strip('_')
    
    return name

def translate_russian_to_english(ru_name):
    """Translate cleaned Russian name to English"""
    # Basic translation dictionary for common animals
    translations = {
        # Sharks
        '–±—ã—á—å—è_–∞–∫—É–ª–∞': 'bull_shark',
        '—Ç–∏–≥—Ä–æ–≤–∞—è_–∞–∫—É–ª–∞': 'tiger_shark', 
        '–±–µ–ª–∞—è_–∞–∫—É–ª–∞': 'great_white_shark',
        '–∫–∏—Ç–æ–≤–∞—è_–∞–∫—É–ª–∞': 'whale_shark',
        '–∞–∫—É–ª–∞-–º–æ–ª–æ—Ç': 'hammerhead_shark',
        '—à–µ—Å—Ç–∏–∂–∞–±–µ—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'sixgill_shark',
        '–ø–æ–ª—è—Ä–Ω–∞—è_–∞–∫—É–ª–∞': 'greenland_shark',
        '—Ç—É–ø–æ—Ä—ã–ª–∞—è_–∞–∫—É–ª–∞': 'bull_shark',
        '–∞–∫—É–ª–∞': 'shark',
        
        # Lions
        '–∞–∑–∏–∞—Ç—Å–∫–∏–π_–ª–µ–≤': 'asiatic_lion',
        '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π_–ª–µ–≤': 'african_lion',
        '–±–µ—Ä–±–µ—Ä–∏–π—Å–∫–∏–π_–ª–µ–≤': 'barbary_lion',
        '–ª–µ–≤': 'lion',
        
        # Wolves
        '—Å–µ—Ä—ã–π_–≤–æ–ª–∫': 'gray_wolf',
        '–∫—Ä–∞—Å–Ω—ã–π_–≤–æ–ª–∫': 'red_wolf',
        '–º–µ–ª–≤–∏–ª—å—Å–∫–∏–π_–æ—Å—Ç—Ä–æ–≤–Ω–æ–π_–≤–æ–ª–∫': 'wolf',
        '—Ç–∏–±–µ—Ç—Å–∫–∏–π_–≤–æ–ª–∫': 'wolf',
        '–≤–æ–ª–∫': 'wolf',
        
        # Fish
        '—Å—É–¥–∞–∫': 'zander',
        '–≤–æ–ª–∂—Å–∫–∏–π_—Å—É–¥–∞–∫': 'volga_zander',
        '–±—ë—Ä—à': 'volga_zander',
        '–±–µ—Ä—à': 'volga_zander',
        '—â—É–∫–∞': 'pike',
        '–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '–∑–æ–ª–æ—Ç–æ–π_–∫–∞—Ä–∞—Å—å': 'crucian_carp',
        '—É–∫–ª–µ–π–∫–∞': 'bleak',
        '–≥–æ—Ä–±—É—à–∞': 'pink_salmon',
        '–±—ã—Å—Ç—Ä—è–Ω–∫–∞': 'spirlin',
        '—è–∑—å': 'ide',
        '–µ–ª–µ—Ü': 'dace',
        '—Å–∏–≥': 'whitefish',
        '–º–µ—á_—Ä—ã–±–∞': 'swordfish',
        '—Ä—ã–±–∞_–º–µ—á': 'swordfish',
        '—Å–æ–ª–Ω–µ—á–Ω–∞—è_—Ä—ã–±–∞': 'sunfish',
        '—Ä—ã–±–∞_—Ç–æ–ø–æ—Ä–∏–∫': 'hatchetfish',
        '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_—É–≥–æ—Ä—å': 'electric_eel',
        '–∏–ª–∏—Å—Ç—ã–π_–ø—Ä—ã–≥—É–Ω': 'mudskipper',
        '—Ä—ã–±–∞_–ø—Ä—ã–≥—É–Ω_–∏–ª–∏—Å—Ç—ã–π': 'mudskipper',
        
        # Other animals
        '–±–æ–ª—å—à–µ—É—Ö–∞—è_–ª–∏—Å–∏—Ü–∞': 'bat_eared_fox',
        '—Ä—ã–∂–∞—è_–ª–∏—Å–∏—Ü–∞': 'red_fox',
        '—Å—Ç–µ–ø–Ω–∞—è_–ª–∏—Å–∏—Ü–∞': 'fox',
        '–ª–∏—Å–∏—Ü–∞': 'fox',
        '–µ–Ω–æ—Ç_–ø–æ–ª–æ—Å–∫—É–Ω': 'raccoon',
        '–µ–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω': 'raccoon',
        '–µ–Ω–æ—Ç_—Ä–∞–∫–æ–µ–¥': 'crab_eating_raccoon',
        '–µ–Ω–æ—Ç-—Ä–∞–∫–æ–µ–¥': 'crab_eating_raccoon',
        '–µ–Ω–æ—Ç–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'raccoon_dog',
        '–≥–∏–µ–Ω–æ–≤–∏–¥–Ω–∞—è_—Å–æ–±–∞–∫–∞': 'african_wild_dog',
        '–¥–∏–∫–∞—è_—Å–æ–±–∞–∫–∞_–¥–∏–Ω–≥–æ': 'dingo',
        '–¥–∏–Ω–≥–æ': 'dingo',
        '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è_–Ω–æ—Ä–∫–∞': 'european_mink',
        '–Ω–æ—Ä–∫–∞': 'mink',
        '–≤—ã–¥—Ä–∞': 'otter',
        '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è_–≤—ã–¥—Ä–∞': 'otter',
        '–º–æ—Ä—Å–∫–æ–π_–∫–æ–Ω–µ–∫': 'seahorse',
        '–º–æ—Ä—Å–∫–∏–µ_–∫–æ–Ω—å–∫–∏': 'seahorse',
        '–æ—Ü–µ–ª–æ—Ç': 'ocelot',
        '—Å–æ–±–æ–ª—å': 'sable',
        '—à–∞–∫–∞–ª': 'jackal',
        '—ç—Ñ–∏–æ–ø—Å–∫–∏–π_—à–∞–∫–∞–ª': 'ethiopian_wolf',
        '–∫–æ–π–æ—Ç': 'coyote',
        '–≤–æ–¥—è–Ω–æ–π_–º–∞–Ω–≥—É—Å—Ç': 'marsh_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç-–∫—Ä–∞–±–æ–µ–¥': 'crab_eating_mongoose',
        '–º–∞–Ω–≥—É—Å—Ç': 'mongoose',
        '–∏—Ä–±–∏—Å': 'snow_leopard',
        '–ª–µ–æ–ø–∞—Ä–¥': 'leopard',
        '—á–∏–ª–∏–π—Å–∫–∞—è_–∫–æ—à–∫–∞': 'jungle_cat',
        '–∫–æ—à–∫–∞': 'cat',
        '—Å–æ–±–∞–∫–∞': 'dog'
    }
    
    return translations.get(ru_name, None)

def process_real_files():
    """Process real files from directories"""
    
    print("üêæ Creating Animal World from REAL files")
    print("=" * 50)
    
    # Get real file lists
    animals_en_dir = 'animals_en'
    animals_ru_dir = 'animals_ru'
    final_dir = 'data/images/animal_world'
    
    os.makedirs(final_dir, exist_ok=True)
    os.makedirs('data/words/ru', exist_ok=True)
    os.makedirs('data/words/en', exist_ok=True)
    
    # Step 1: Get English files
    en_files = [f for f in os.listdir(animals_en_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"English files: {len(en_files)}")
    
    # Step 2: Get Russian files  
    ru_files = [f for f in os.listdir(animals_ru_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"Russian files: {len(ru_files)}")
    
    # Step 3: Process English files
    english_animals = {}
    for filename in en_files:
        name = os.path.splitext(filename)[0].lower().replace(' ', '_')
        english_animals[name] = {
            'source': 'english',
            'filename': filename,
            'display_name': os.path.splitext(filename)[0]
        }
    
    print(f"Processed {len(english_animals)} English animals")
    
    # Step 4: Process Russian files
    russian_animals = {}
    translated_count = 0
    
    for filename in ru_files:
        cleaned = clean_russian_filename(filename)
        translated = translate_russian_to_english(cleaned)
        
        if translated and translated not in russian_animals:
            russian_animals[translated] = {
                'source': 'russian',
                'filename': filename,
                'display_name': translated.replace('_', ' ').title(),
                'original_ru': cleaned
            }
            translated_count += 1
            print(f"  {filename} ‚Üí {cleaned} ‚Üí {translated}")
    
    print(f"Translated {translated_count} Russian animals")
    
    # Step 5: Merge without duplicates
    final_animals = {}
    
    # Add English first (priority)
    for name, data in english_animals.items():
        final_animals[name] = data
    
    # Add Russian (only if not duplicate)
    duplicates = 0
    for name, data in russian_animals.items():
        if name not in final_animals:
            final_animals[name] = data
        else:
            duplicates += 1
            print(f"  Duplicate: {name}")
    
    print(f"\nFinal result:")
    print(f"  English: {len(english_animals)}")
    print(f"  Russian: {len(russian_animals)}")
    print(f"  Duplicates: {duplicates}")
    print(f"  Total unique: {len(final_animals)}")
    
    # Step 6: Create numbered collection
    animal_list = []
    
    for index, (name, data) in enumerate(sorted(final_animals.items()), 1):
        image_code = f"ANIMAL-{index:03d}"
        
        # Copy image
        if data['source'] == 'english':
            src_path = os.path.join(animals_en_dir, data['filename'])
        else:
            src_path = os.path.join(animals_ru_dir, data['filename'])
        
        dst_path = os.path.join(final_dir, f"{image_code}.png")
        
        try:
            with Image.open(src_path) as img:
                img = img.convert('RGB')
                img = img.resize((300, 300), Image.Resampling.LANCZOS)
                img.save(dst_path, 'PNG', quality=95, optimize=True)
            
            animal_list.append({
                'number': index,
                'name_en': data['display_name'],
                'code': image_code,
                'source': data['source']
            })
            
        except Exception as e:
            print(f"Error processing {name}: {e}")
    
    # Create word files
    en_file = 'data/words/en/animal_world.txt'
    with open(en_file, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            f.write(f"{animal['number']} - {animal['name_en'].upper()} - {animal['code']}\n")
    
    ru_file = 'data/words/ru/animal_world.txt'
    with open(ru_file, 'w', encoding='utf-8') as f:
        for animal in animal_list:
            # For Russian, we'll need proper translations later
            f.write(f"{animal['number']} - {animal['name_en'].upper()} - {animal['code']}\n")
    
    print(f"\n‚úÖ Created {len(animal_list)} animals")
    print(f"English file: {en_file}")
    print(f"Russian file: {ru_file}")

if __name__ == "__main__":
    process_real_files() 