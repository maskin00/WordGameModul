// modules/GameEngine.js
class GameEngine {
    constructor(dataManager, languageManager, categoryManager) {
        this.dataManager = dataManager;
        this.languageManager = languageManager;
        this.categoryManager = categoryManager;
        
        this.canvas = null;
        this.ctx = null;
        this.words = [];
        this.score = 0;
        this.level = 1;
        this.spawnDelay = 2000;
        this.lastSpawn = 0;
        this.input = '';
        this.isPaused = false;
        this.isActive = false;
        this.gameLoop = null;
        this.particles = [];
        
        // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ø–∞–≤–Ω–∞
        this.maxWordsOnScreen = 1; // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        this.lastCategoryId = null; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.gameStarted = false; // –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–±–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 25%)
        this.baseSpeed = 0.75; // –ë—ã–ª–æ 1, —Å—Ç–∞–ª–æ 0.75 (-25%)
        this.baseFontSize = 28;
        this.baseImageSize = 200;
        
        // üé® –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ï –≠–§–§–ï–ö–¢–´
        this.keyPressEffects = []; // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
        this.letterHighlights = []; // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±—É–∫–≤
        this.shootingEffects = []; // –≠—Ñ—Ñ–µ–∫—Ç—ã "–≤—ã—Å—Ç—Ä–µ–ª–æ–≤"
        this.pulseEffects = []; // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
        
        // Thematic decorations system
        this.decorations = [];
        this.decorationAnimations = [];
        this.currentTheme = null;
    }

    async initialize() {
        try {
            this.canvas = document.getElementById('gameCanvas');
            this.ctx = this.canvas.getContext('2d');
            this.canvas.width = 800;
            this.canvas.height = 600;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            this.updateGameScale(this.canvas.width, this.canvas.height);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ DOM –≥–æ—Ç–æ–≤
            this.setupEventListeners();
            console.log('GameEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameEngine:', error);
            return false;
        }
    }

    handleResize(width, height) {
        if (!this.canvas) return;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
        const oldWidth = this.canvas.width;
        const oldHeight = this.canvas.height;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        this.canvas.width = width;
        this.canvas.height = height;
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        if (oldWidth > 0 && oldHeight > 0) {
            const scaleX = width / oldWidth;
            const scaleY = height / oldHeight;
            
            this.words.forEach(word => {
                word.x = word.x * scaleX;
                word.y = word.y * scaleY;
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã—Å–æ—Ç–µ
                word.speed = word.speed * scaleY;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if (word.image) {
                    word.updateScale(width, height);
                }
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        this.updateGameScale(width, height);
        
        console.log(`Canvas resized to ${width}x${height}`);
    }

    updateGameScale(width, height) {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        
        // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∑–∞–º–µ–¥–ª–µ–Ω–æ –Ω–∞ 40% + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ 25%)
        this.baseSpeed = Math.max(0.225, Math.min(0.9, height / 700 * 0.45)); // –£–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 25%
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        const isMobile = window.innerWidth <= 480;
        const isTablet = window.innerWidth <= 1024 && window.innerWidth > 480;
        const canvasArea = width * height;
        
        if (isMobile) {
            // –ú–æ–±–∏–ª—å–Ω—ã–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ 30%
            this.baseFontSize = Math.max(18, Math.min(26, Math.sqrt(canvasArea) / 23));
            this.baseImageSize = Math.max(104, Math.min(208, Math.sqrt(canvasArea) / 12)); // +30% –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        } else if (isTablet) {
            // –ü–ª–∞–Ω—à–µ—Ç—ã - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            this.baseFontSize = Math.max(18, Math.min(30, Math.sqrt(canvasArea) / 28));
            this.baseImageSize = Math.max(140, Math.min(250, Math.sqrt(canvasArea) / 14));
        } else {
            // –î–µ—Å–∫—Ç–æ–ø - –∫—Ä—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            this.baseFontSize = Math.max(22, Math.min(40, Math.sqrt(canvasArea) / 30));
            this.baseImageSize = Math.max(200, Math.min(400, Math.sqrt(canvasArea) / 8));
        }
        
        console.log(`Game scale updated: speed=${this.baseSpeed.toFixed(3)}, fontSize=${this.baseFontSize}, imageSize=${this.baseImageSize}, canvas=${width}x${height}, area=${canvasArea}, device=${isMobile ? 'mobile' : isTablet ? 'tablet' : 'desktop'}`);
    }

    setupEventListeners() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        const startButton = document.getElementById('startButton');
        const pauseButton = document.getElementById('pauseButton');
        const stopButton = document.getElementById('stopButton');
        
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π:');
        console.log(`  startButton: ${startButton ? '‚úÖ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
        console.log(`  pauseButton: ${pauseButton ? '‚úÖ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
        console.log(`  stopButton: ${stopButton ? '‚úÖ –Ω–∞–π–¥–µ–Ω–∞' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
        
        if (startButton) {
            startButton.addEventListener('click', () => {
                this.startGame();
            });
        }
        
        if (pauseButton) {
            pauseButton.addEventListener('click', () => {
                this.pauseGame();
            });
        }
        
        if (stopButton) {
            stopButton.addEventListener('click', () => {
                this.stopGame();
            });
        }
        document.addEventListener('keydown', (e) => {
            if (this.isPaused || !this.isActive) return;
            const key = e.key;
            
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Ñ–∏—Å–æ–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤
            if (this.languageManager.isKeySupported(key) || key === 'Backspace' || key === '-' || key === ' ') {
                if (key === 'Backspace') {
                    this.handleKeyPress('CLEAR');
                } else {
                    this.handleKeyPress(key.toUpperCase());
                }
                e.preventDefault();
            }
        });
    }

    startGame() {
        console.log(`üîµ startGame() –≤—ã–∑–≤–∞–Ω. isActive: ${this.isActive}, isPaused: ${this.isPaused}, gameStarted: ${this.gameStarted}`);
        
        if (!this.categoryManager.isReadyForGame()) {
            alert(this.languageManager.getText('selectCategory') || '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä—ã');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.checkCategoryChange();
        
        if (this.isPaused) {
            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—É–∑—É
            console.log('‚Ü™Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –ø–∞—É–∑—ã');
            this.isPaused = false;
            this.resumeGameLoop();
        } else {
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
            this.resetGameState();
            this.isActive = true;
            this.gameStarted = true;
            
            // Initialize theme decorations
            const currentCategoryId = this.categoryManager.getCurrentCategory();
            this.initializeThemeDecorations(currentCategoryId);
            
            this.resumeGameLoop();
        }
        this.updateUI();
        console.log(`‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isActive: ${this.isActive}, isPaused: ${this.isPaused}, gameStarted: ${this.gameStarted}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
    checkCategoryChange() {
        const currentCategoryId = this.categoryManager.getCurrentCategory();
        if (this.lastCategoryId !== currentCategoryId) {
            console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${this.lastCategoryId} –Ω–∞ ${currentCategoryId}, –æ—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω`);
            this.clearAllWords();
            this.lastCategoryId = currentCategoryId;
            // –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if (this.isActive && this.gameStarted) {
                // –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                this.stopGame();
            }
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª–æ–≤ —Å —ç–∫—Ä–∞–Ω–∞
    clearAllWords() {
        this.words = [];
        this.particles = [];
        this.input = '';
        this.lastSpawn = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞–≤–Ω–∞
        console.log('–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω, lastSpawn —Å–±—Ä–æ—à–µ–Ω');
    }

    pauseGame() {
        console.log(`üü° pauseGame() –≤—ã–∑–≤–∞–Ω. isActive: ${this.isActive}, isPaused: ${this.isPaused}, gameStarted: ${this.gameStarted}`);
        
        if (!this.isActive) {
            console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø–∞—É–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return;
        }
        
        this.isPaused = !this.isPaused;
        
        if (this.isPaused) {
            console.log('‚è∏Ô∏è –ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            this.stopGameLoop();
        } else {
            console.log('‚ñ∂Ô∏è –ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            this.resumeGameLoop();
        }
        
        console.log(`‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isActive: ${this.isActive}, isPaused: ${this.isPaused}`);
    }

    stopGame() {
        this.isActive = false;
        this.isPaused = false;
        this.gameStarted = false;
        this.stopGameLoop();
        this.resetGameState();
        this.clearCanvas(); // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        this.updateUI();
        console.log('–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–±—Ä–æ—à–µ–Ω–∞, —ç–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω');
    }

    resetGameState() {
        this.words = [];
        this.particles = [];
        this.score = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        this.level = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        this.input = '';
        this.lastSpawn = 0;
        this.spawnDelay = 2000; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–ø–∞–≤–Ω–∞
        console.log('–ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
    }

    resumeGameLoop() {
        if (this.gameLoop) {
            cancelAnimationFrame(this.gameLoop);
        }
        const loop = (timestamp) => {
            if (!this.isActive || this.isPaused) return;
            this.update(timestamp);
            this.draw();
            this.gameLoop = requestAnimationFrame(loop);
        };
        this.gameLoop = requestAnimationFrame(loop);
    }

    stopGameLoop() {
        if (this.gameLoop) {
            cancelAnimationFrame(this.gameLoop);
            this.gameLoop = null;
        }
    }

    update(timestamp) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ
        this.checkCategoryChange();
        
        // –°–ø–∞–≤–Ω —Å–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if (!this.gameStarted) {
            return;
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –≤–∑—Ä—ã–≤–∞—é—â–∏–µ—Å—è) —Å–ª–æ–≤–∞
        const activeWords = this.words.filter(word => !word.exploding);
        
        // –°–ø–∞–≤–Ω –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
        // 1. –ù–∞ —ç–∫—Ä–∞–Ω–µ –ù–ï–¢ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
        // 2. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞–≤–Ω–∞
        // 3. –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if (activeWords.length === 0 && (timestamp - this.lastSpawn > this.spawnDelay)) {
            this.spawnWord();
            this.lastSpawn = timestamp;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
        for (let i = this.words.length - 1; i >= 0; i--) {
            const word = this.words[i];
            word.update();
            
            // –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–ø–∞–ª–∏ –∑–∞ —ç–∫—Ä–∞–Ω (—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫)
            if (word.y > this.canvas.height + 100) {
                if (!word.exploding) {
                    // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
                    this.score = Math.max(0, this.score - 5);
                    console.log(`–°–ª–æ–≤–æ "${word.text}" –ø—Ä–æ–ø—É—â–µ–Ω–æ, -5 –æ—á–∫–æ–≤. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${this.score}`);
                    this.updateUI();
                }
                this.words.splice(i, 1);
                console.log('–°–ª–æ–≤–æ —É–ø–∞–ª–æ –∑–∞ —ç–∫—Ä–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∞–≤–Ω');
            } 
            // –£–¥–∞–ª—è–µ–º –≤–∑–æ—Ä–≤–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –±–µ–∑ —á–∞—Å—Ç–∏—Ü
            else if (word.exploding && word.particles.length === 0) {
                this.words.splice(i, 1);
                console.log('–í–∑–æ—Ä–≤–∞–≤—à–µ–µ—Å—è —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∞–≤–Ω');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
        for (let i = this.particles.length - 1; i >= 0; i--) {
            this.particles[i].update();
            if (this.particles[i].life <= 0) {
                this.particles.splice(i, 1);
            }
        }
        
        // üé® –û–ë–ù–û–í–õ–Ø–ï–ú –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ï –≠–§–§–ï–ö–¢–´
        this.updateAnimationEffects();
        
        // üé® –û–ë–ù–û–í–õ–Ø–ï–ú –ê–ù–ò–ú–ê–¶–ò–ò –î–ï–ö–û–†–ê–¶–ò–ô
        this.updateDecorationAnimations();
        
        this.updateDifficulty();
    }

    draw() {
        // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
        this.ctx.fillStyle = 'black';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –†–∏—Å—É–µ–º —Å–ª–æ–≤–∞
        this.words.forEach(word => {
            word.draw(this.ctx, this.input);
        });
        
        // –†–∏—Å—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
        this.particles.forEach(particle => {
            particle.draw(this.ctx);
        });
        
        // –†–∏—Å—É–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è
        if (this.isActive && this.decorations.length > 0) {
            this.drawDecorations();
        }
        
        // –†–∏—Å—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞
        this.drawInput();
    }

    drawInput() {
        this.ctx.font = '24px Arial';
        this.ctx.fillStyle = 'white';
        this.ctx.fillText(`–í–≤–æ–¥: ${this.input}`, 10, this.canvas.height - 20);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if (this.words.length > 0 && !this.words[0].exploding) {
            const word = this.words[0];
            const isPartialMatch = this.isPartialMatch(this.input, word.text);
            const statusText = isPartialMatch ? '‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚úó –û—à–∏–±–∫–∞';
            this.ctx.fillStyle = isPartialMatch ? 'lime' : 'red';
            this.ctx.fillText(statusText, 200, this.canvas.height - 20);
        }
    }

    spawnWord() {
        const wordData = this.categoryManager.getRandomWord();
        if (!wordData) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞');
            return;
        }
        
        const activeWords = this.words.filter(word => !word.exploding);
        console.log(`–°–ü–ê–í–ù: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–æ "${wordData.word}". –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ: ${activeWords.length}`);
        
        if (activeWords.length > 0) {
            console.warn('–°–ü–ê–í–ù –û–¢–ú–ï–ù–ï–ù: –ù–∞ —ç–∫—Ä–∞–Ω–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ');
            return;
        }
        
        const x = this.canvas.width / 2; // –°–ø–∞–≤–Ω–∏–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        const word = new Word(wordData.word, x, wordData.imagePath, this);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
        word.speed = this.getCurrentSpeed();
        this.words.push(word);
        console.log(`–°–ü–ê–í–ù –£–°–ü–ï–®–ï–ù: –ó–∞—Å–ø–∞–≤–Ω–µ–Ω–æ —Å–ª–æ–≤–æ "${wordData.word}" —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é ${word.speed.toFixed(3)}. –í—Å–µ–≥–æ —Å–ª–æ–≤: ${this.words.length}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    isPartialMatch(input, targetWord) {
        if (!input) return true; // –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–µ–Ω
        
        const inputUpper = input.toUpperCase().replace(/\s+/g, ' '); // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        const targetUpper = targetWord.toUpperCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª—É —Å–ª–æ–≤–∞
        return targetUpper.startsWith(inputUpper);
    }

    handleKeyPress(key) {
        if (!this.isActive || this.isPaused || !this.gameStarted) return;
        
        if (key === 'CLEAR') {
            this.input = '';
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ
        const activeWord = this.words.find(word => !word.exploding);
        if (!activeWord) return;
        
        const newInput = this.input + key;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        if (this.isPartialMatch(newInput, activeWord.text)) {
            this.input = newInput;
            
            // üéØ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ë–£–ö–í–ê - –°–û–ó–î–ê–ï–ú –≠–§–§–ï–ö–¢–´
            this.createKeyPressEffect(key, true, activeWord);
            this.createLetterHighlight(activeWord, this.input.length - 1);
            this.createShootingEffect(activeWord, this.input.length - 1);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (this.input.toUpperCase().replace(/\s+/g, ' ') === activeWord.text.toUpperCase()) {
                this.onWordGuessed(activeWord);
            }
        } else {
            // ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ë–£–ö–í–ê - –°–û–ó–î–ê–ï–ú –≠–§–§–ï–ö–¢ –û–®–ò–ë–ö–ò
            this.createKeyPressEffect(key, false, activeWord);
            this.createErrorEffect(activeWord);
            
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞ - —à—Ç—Ä–∞—Ñ –∏ —Å–±—Ä–æ—Å –≤–≤–æ–¥–∞
            this.score = Math.max(0, this.score - 5);
            this.input = '';
            console.log(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞, -5 –æ—á–∫–æ–≤. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${this.score}`);
            this.updateUI();
        }
    }

    checkInput() {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ handleKeyPress
    }

    onWordGuessed(word) {
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤: +10 –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        const points = 10;
        
        this.score += points;
        
        // üéâ –°–õ–û–í–û –£–ì–ê–î–ê–ù–û - –°–û–ó–î–ê–ï–ú –ú–û–©–ù–´–ï –≠–§–§–ï–ö–¢–´
        this.createWordCompleteEffect(word);
        this.createPulseEffect(word);
        
        word.explode();
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < 15; i++) {
            this.particles.push(new Particle(word.x, word.y));
        }
        
        this.input = '';
        this.updateUI();
        console.log(`–°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ: ${word.text}, +${points} –æ—á–∫–æ–≤. –û–±—â–∏–π —Å—á–µ—Ç: ${this.score}. –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${this.getCurrentSpeed().toFixed(3)}`);
    }

    updateDifficulty() {
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –∫–∞–∂–¥—ã–µ 300 –æ—á–∫–æ–≤ = –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏
        const newLevel = Math.floor(this.score / 300) + 1;
        if (newLevel > this.level) {
            this.level = newLevel;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤
            const newSpeed = this.getCurrentSpeed();
            this.words.forEach(word => {
                word.speed = newSpeed;
            });
            
            console.log(`–£—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–≤—ã—à–µ–Ω –¥–æ ${this.level} (${this.score} –æ—á–∫–æ–≤). –ù–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${newSpeed.toFixed(3)}`);
        }
    }

    updateUI() {
        const scoreElement = document.getElementById('score');
        if (scoreElement) {
            const scoreText = this.languageManager.getText('score') || '–û—á–∫–∏';
            const levelText = this.languageManager.getText('level') || '–£—Ä–æ–≤–µ–Ω—å';
            scoreElement.textContent = `${scoreText}: ${this.score} (${levelText} ${this.level})`;
        }
    }

    updateGameState() {
        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.isActive && this.gameStarted) {
            console.log('–ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É');
            this.stopGame(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        } else {
            console.log('–ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            this.clearAllWords(); // –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        }
    }

    isGameActive() {
        return this.isActive && !this.isPaused;
    }

    getGameStats() {
        return {
            score: this.score,
            level: this.level,
            wordsOnScreen: this.words.length,
            input: this.input,
            isActive: this.isActive,
            isPaused: this.isPaused
        };
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–≤–∞—Å–∞
    clearCanvas() {
        if (this.ctx) {
            this.ctx.fillStyle = 'black';
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    getCurrentSpeed() {
        // –ö–∞–∂–¥—ã–µ 300 –æ—á–∫–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 10%
        const speedLevel = Math.floor(this.score / 300);
        const speedMultiplier = Math.pow(1.1, speedLevel); // 1.1^n –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞ 10% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        const currentSpeed = this.baseSpeed * speedMultiplier;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        return Math.min(2.0, currentSpeed);
    }

    // üé® ========== –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ï –≠–§–§–ï–ö–¢–´ ==========

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
     */
    createKeyPressEffect(key, isCorrect, word) {
        this.keyPressEffects.push({
            key: key,
            x: word.x,
            y: word.y - 50,
            isCorrect: isCorrect,
            life: 30,
            maxLife: 30,
            scale: 1.0,
            alpha: 1.0
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ
     */
    createLetterHighlight(word, letterIndex) {
        this.letterHighlights.push({
            word: word,
            letterIndex: letterIndex,
            life: 20,
            maxLife: 20,
            intensity: 1.0
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç "–≤—ã—Å—Ç—Ä–µ–ª–∞" –≤ –±—É–∫–≤—É
     */
    createShootingEffect(word, letterIndex) {
        const letterX = this.calculateLetterPosition(word, letterIndex);
        this.shootingEffects.push({
            startX: this.canvas.width / 2,
            startY: this.canvas.height - 100,
            targetX: letterX,
            targetY: word.y + 100,
            currentX: this.canvas.width / 2,
            currentY: this.canvas.height - 100,
            life: 15,
            maxLife: 15,
            speed: 8
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ—à–∏–±–∫–∏
     */
    createErrorEffect(word) {
        // –ö—Ä–∞—Å–Ω–∞—è –≤—Å–ø—ã—à–∫–∞ –≤–æ–∫—Ä—É–≥ —Å–ª–æ–≤–∞
        this.keyPressEffects.push({
            key: '‚ùå',
            x: word.x,
            y: word.y,
            isCorrect: false,
            life: 20,
            maxLife: 20,
            scale: 2.0,
            alpha: 0.8
        });
        
        // –î—Ä–æ–∂–∞–Ω–∏–µ —Å–ª–æ–≤–∞
        word.shakeEffect = {
            life: 15,
            intensity: 5
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ª–æ–≤–∞
     */
    createWordCompleteEffect(word) {
        // –ó–æ–ª–æ—Ç–∞—è –≤—Å–ø—ã—à–∫–∞
        this.keyPressEffects.push({
            key: 'üéâ',
            x: word.x,
            y: word.y,
            isCorrect: true,
            life: 40,
            maxLife: 40,
            scale: 3.0,
            alpha: 1.0
        });
        
        // –ó–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ —Å–ª–æ–≤–∞
        for (let i = 0; i < 8; i++) {
            const angle = (i / 8) * Math.PI * 2;
            const distance = 80;
            this.keyPressEffects.push({
                key: '‚≠ê',
                x: word.x + Math.cos(angle) * distance,
                y: word.y + Math.sin(angle) * distance,
                isCorrect: true,
                life: 30,
                maxLife: 30,
                scale: 1.5,
                alpha: 1.0
            });
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
     */
    createPulseEffect(word) {
        this.pulseEffects.push({
            x: word.x,
            y: word.y,
            life: 25,
            maxLife: 25,
            radius: 10,
            maxRadius: 100
        });
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ
     */
    calculateLetterPosition(word, letterIndex) {
        const fontSize = this.baseFontSize;
        const letterWidth = fontSize * 0.6; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –±—É–∫–≤—ã
        const wordWidth = word.text.length * letterWidth;
        const startX = word.x - wordWidth / 2;
        return startX + letterIndex * letterWidth;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
     */
    updateAnimationEffects() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
        for (let i = this.keyPressEffects.length - 1; i >= 0; i--) {
            const effect = this.keyPressEffects[i];
            effect.life--;
            effect.alpha = effect.life / effect.maxLife;
            effect.scale = 1.0 + (1 - effect.alpha) * 0.5;
            
            if (effect.life <= 0) {
                this.keyPressEffects.splice(i, 1);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –±—É–∫–≤
        for (let i = this.letterHighlights.length - 1; i >= 0; i--) {
            const highlight = this.letterHighlights[i];
            highlight.life--;
            highlight.intensity = highlight.life / highlight.maxLife;
            
            if (highlight.life <= 0) {
                this.letterHighlights.splice(i, 1);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
        for (let i = this.shootingEffects.length - 1; i >= 0; i--) {
            const shot = this.shootingEffects[i];
            shot.life--;
            
            // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
            const dx = shot.targetX - shot.currentX;
            const dy = shot.targetY - shot.currentY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance > shot.speed) {
                shot.currentX += (dx / distance) * shot.speed;
                shot.currentY += (dy / distance) * shot.speed;
            } else {
                shot.currentX = shot.targetX;
                shot.currentY = shot.targetY;
            }
            
            if (shot.life <= 0) {
                this.shootingEffects.splice(i, 1);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
        for (let i = this.pulseEffects.length - 1; i >= 0; i--) {
            const pulse = this.pulseEffects[i];
            pulse.life--;
            const progress = 1 - (pulse.life / pulse.maxLife);
            pulse.radius = pulse.maxRadius * progress;
            
            if (pulse.life <= 0) {
                this.pulseEffects.splice(i, 1);
            }
        }
    }

    /**
     * –†–∏—Å—É–µ—Ç –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
     */
    drawAnimationEffects() {
        // –†–∏—Å—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
        this.keyPressEffects.forEach(effect => {
            this.ctx.save();
            this.ctx.globalAlpha = effect.alpha;
            this.ctx.font = `${24 * effect.scale}px Arial`;
            this.ctx.textAlign = 'center';
            this.ctx.fillStyle = effect.isCorrect ? '#00ff00' : '#ff0000';
            this.ctx.fillText(effect.key, effect.x, effect.y);
            this.ctx.restore();
        });

        // –†–∏—Å—É–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –±—É–∫–≤
        this.letterHighlights.forEach(highlight => {
            if (highlight.word && !highlight.word.exploding) {
                const letterX = this.calculateLetterPosition(highlight.word, highlight.letterIndex);
                const letterY = highlight.word.y + 120;
                
                this.ctx.save();
                this.ctx.globalAlpha = highlight.intensity * 0.5;
                this.ctx.fillStyle = '#ffff00';
                this.ctx.beginPath();
                this.ctx.arc(letterX, letterY, 20, 0, Math.PI * 2);
                this.ctx.fill();
                this.ctx.restore();
            }
        });

        // –†–∏—Å—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
        this.shootingEffects.forEach(shot => {
            this.ctx.save();
            this.ctx.strokeStyle = '#00ffff';
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.moveTo(shot.startX, shot.startY);
            this.ctx.lineTo(shot.currentX, shot.currentY);
            this.ctx.stroke();
            
            // –¢–æ—á–∫–∞ –Ω–∞ –∫–æ–Ω—Ü–µ
            this.ctx.fillStyle = '#ffffff';
            this.ctx.beginPath();
            this.ctx.arc(shot.currentX, shot.currentY, 4, 0, Math.PI * 2);
            this.ctx.fill();
            this.ctx.restore();
        });

        // –†–∏—Å—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
        this.pulseEffects.forEach(pulse => {
            this.ctx.save();
            this.ctx.globalAlpha = 0.3 * (pulse.life / pulse.maxLife);
            this.ctx.strokeStyle = '#ffd700';
            this.ctx.lineWidth = 4;
            this.ctx.beginPath();
            this.ctx.arc(pulse.x, pulse.y, pulse.radius, 0, Math.PI * 2);
            this.ctx.stroke();
            this.ctx.restore();
        });
    }

    // Thematic Decorations System
    initializeThemeDecorations(categoryId) {
        this.decorations = [];
        this.decorationAnimations = [];
        this.currentTheme = categoryId;
        
        const themes = {
            'capitals': this.createCapitalsDecorations.bind(this),
            'countries': this.createCountriesDecorations.bind(this),
            'animals': this.createAnimalsDecorations.bind(this),
            'dinosaurs': this.createDinosaursDecorations.bind(this),
            'animal_world': this.createAnimalWorldDecorations.bind(this),
            'footballers': this.createFootballersDecorations.bind(this)
        };
        
        if (themes[categoryId]) {
            themes[categoryId]();
        }
    }
    
    createCapitalsDecorations() {
        // –ì–æ—Ä–æ–¥—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –∑–¥–∞–Ω–∏—è, —Ñ–ª–∞–≥–∏, –∑–≤–µ–∑–¥—ã
        const decorations = [
            // –ó–¥–∞–Ω–∏—è –ø–æ –∫—Ä–∞—è–º
            { type: 'building', x: 50, y: 400, width: 40, height: 80, color: '#4a90e2' },
            { type: 'building', x: 100, y: 380, width: 35, height: 100, color: '#357abd' },
            { type: 'building', x: this.canvas.width - 90, y: 390, width: 40, height: 90, color: '#4a90e2' },
            { type: 'building', x: this.canvas.width - 140, y: 370, width: 35, height: 110, color: '#357abd' },
            
            // –§–ª–∞–≥–∏
            { type: 'flag', x: 30, y: 50, size: 25, colors: ['#ff6b6b', '#4ecdc4', '#45b7d1'] },
            { type: 'flag', x: this.canvas.width - 55, y: 50, size: 25, colors: ['#96ceb4', '#feca57', '#ff9ff3'] },
            
            // –ó–≤–µ–∑–¥—ã —Å—Ç–æ–ª–∏—Ü
            { type: 'star', x: 80, y: 80, size: 8, color: '#ffd700', twinkle: true },
            { type: 'star', x: this.canvas.width - 80, y: 90, size: 8, color: '#ffd700', twinkle: true },
            { type: 'star', x: 120, y: 120, size: 6, color: '#ffed4e', twinkle: true }
        ];
        
        this.decorations = decorations;
    }
    
    createCountriesDecorations() {
        // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –≥–æ—Ä—ã, –æ–±–ª–∞–∫–∞, –∫–æ–º–ø–∞—Å
        const decorations = [
            // –ì–æ—Ä—ã
            { type: 'mountain', x: 20, y: 350, width: 100, height: 80, color: '#8e9aaf' },
            { type: 'mountain', x: 60, y: 370, width: 80, height: 60, color: '#a8b5c8' },
            { type: 'mountain', x: this.canvas.width - 120, y: 360, width: 90, height: 70, color: '#8e9aaf' },
            
            // –û–±–ª–∞–∫–∞
            { type: 'cloud', x: 150, y: 60, size: 30, drift: true },
            { type: 'cloud', x: this.canvas.width - 180, y: 80, size: 25, drift: true },
            { type: 'cloud', x: 200, y: 100, size: 20, drift: true },
            
            // –ö–æ–º–ø–∞—Å
            { type: 'compass', x: this.canvas.width - 60, y: this.canvas.height - 60, size: 40, rotate: true }
        ];
        
        this.decorations = decorations;
    }
    
    createAnimalsDecorations() {
        // –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –¥–µ—Ä–µ–≤—å—è, –ª–∏—Å—Ç—å—è, —Å–ª–µ–¥—ã
        const decorations = [
            // –î–µ—Ä–µ–≤—å—è
            { type: 'tree', x: 40, y: 320, width: 30, height: 100, leafColor: '#4caf50' },
            { type: 'tree', x: this.canvas.width - 70, y: 310, width: 35, height: 110, leafColor: '#66bb6a' },
            
            // –ö—É—Å—Ç—ã
            { type: 'bush', x: 90, y: 400, size: 25, color: '#4caf50' },
            { type: 'bush', x: this.canvas.width - 115, y: 390, size: 30, color: '#66bb6a' },
            
            // –õ–µ—Ç–∞—é—â–∏–µ –ª–∏—Å—Ç—å—è
            { type: 'leaf', x: 120, y: 150, size: 8, color: '#4caf50', float: true },
            { type: 'leaf', x: this.canvas.width - 140, y: 180, size: 10, color: '#8bc34a', float: true },
            { type: 'leaf', x: 180, y: 120, size: 6, color: '#66bb6a', float: true },
            
            // –°–ª–µ–¥—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
            { type: 'pawprint', x: 150, y: 420, size: 12, color: '#8d6e63' },
            { type: 'pawprint', x: 170, y: 430, size: 12, color: '#8d6e63' },
            { type: 'pawprint', x: this.canvas.width - 190, y: 425, size: 12, color: '#8d6e63' }
        ];
        
        this.decorations = decorations;
    }
    
    createDinosaursDecorations() {
        // –î–æ–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –≤—É–ª–∫–∞–Ω—ã, –ø–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫–∏, –º–µ—Ç–µ–æ—Ä—ã
        const decorations = [
            // –í—É–ª–∫–∞–Ω—ã
            { type: 'volcano', x: 30, y: 350, width: 80, height: 90, active: true },
            { type: 'volcano', x: this.canvas.width - 110, y: 340, width: 70, height: 100, active: false },
            
            // –ü–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫–∏
            { type: 'fern', x: 120, y: 380, size: 40, color: '#2e7d32' },
            { type: 'fern', x: this.canvas.width - 160, y: 370, size: 45, color: '#388e3c' },
            
            // –õ–µ—Ç–∞—é—â–∏–µ –º–µ—Ç–µ–æ—Ä—ã
            { type: 'meteor', x: 200, y: 80, size: 8, trail: true, speed: 2 },
            { type: 'meteor', x: this.canvas.width - 220, y: 100, size: 6, trail: true, speed: 1.5 },
            
            // –î–æ–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
            { type: 'prehistoric_plant', x: 80, y: 400, size: 35, color: '#1b5e20' },
            { type: 'prehistoric_plant', x: this.canvas.width - 120, y: 410, size: 30, color: '#2e7d32' }
        ];
        
        this.decorations = decorations;
    }
    
    createAnimalWorldDecorations() {
        // –°–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const decorations = [
            // –î–µ—Ä–µ–≤—å—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            { type: 'tree', x: 35, y: 320, width: 25, height: 90, leafColor: '#4caf50' },
            { type: 'palm_tree', x: this.canvas.width - 65, y: 300, height: 120, leafColor: '#66bb6a' },
            
            // –¶–≤–µ—Ç—ã
            { type: 'flower', x: 100, y: 420, size: 15, color: '#e91e63' },
            { type: 'flower', x: 130, y: 410, size: 12, color: '#9c27b0' },
            { type: 'flower', x: this.canvas.width - 130, y: 415, size: 14, color: '#ff5722' },
            
            // –ë–∞–±–æ—á–∫–∏
            { type: 'butterfly', x: 160, y: 200, size: 12, colors: ['#ff9800', '#ffeb3b'], flutter: true },
            { type: 'butterfly', x: this.canvas.width - 180, y: 180, size: 10, colors: ['#e91e63', '#9c27b0'], flutter: true },
            
            // –°–æ–ª–Ω—Ü–µ
            { type: 'sun', x: this.canvas.width - 80, y: 80, size: 30, rays: true }
        ];
        
        this.decorations = decorations;
    }

    createFootballersDecorations() {
        // –§—É—Ç–±–æ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –ø–æ–ª–µ, –º—è—á–∏, –≤–æ—Ä–æ—Ç–∞, —Å—Ç–∞–¥–∏–æ–Ω
        const decorations = [
            // –§—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ (—Ç—Ä–∞–≤–∞)
            { type: 'grass', x: 0, y: this.canvas.height - 30, width: this.canvas.width, height: 30 },
            
            // –§—É—Ç–±–æ–ª—å–Ω—ã–µ –º—è—á–∏
            { type: 'football', x: 80, y: this.canvas.height - 60, size: 25, bounce: true },
            { type: 'football', x: this.canvas.width - 120, y: this.canvas.height - 55, size: 20, bounce: true },
            
            // –í–æ—Ä–æ—Ç–∞
            { type: 'goal', x: 30, y: this.canvas.height - 100, width: 60, height: 40 },
            { type: 'goal', x: this.canvas.width - 90, y: this.canvas.height - 100, width: 60, height: 40 },
            
            // –§–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥ (—Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ –∫—Ä–∞—è–º –∫–∞–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–æ–ª–∏—Ü)
            { type: 'team_flag', x: 30, y: 50, size: 25, colors: ['#ff0000', '#ffffff', '#0000ff'] },
            { type: 'team_flag', x: this.canvas.width - 55, y: 60, size: 25, colors: ['#ffff00', '#008000'] },
            
            // –°—Ç–∞–¥–∏–æ–Ω–Ω—ã–µ –æ–≥–Ω–∏ (—Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∞—è–º)
            { type: 'stadium_light', x: 50, y: 30, size: 15 },
            { type: 'stadium_light', x: this.canvas.width - 50, y: 30, size: 15 },
            
            // –ù–µ–±–æ–ª—å—à–∏–µ —Ç—Ä–∏–±—É–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∞—è–º (—É–±–∏—Ä–∞–µ–º –ø–æ–ª–æ—Å—É –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
            { type: 'stadium', x: 10, y: 20, width: 80, height: 25 },
            { type: 'stadium', x: this.canvas.width - 90, y: 20, width: 80, height: 25 },
            
            // –ö–æ–Ω—Ñ–µ—Ç—Ç–∏
            { type: 'confetti', x: -10, y: 100, size: 3, colors: ['#ff0000', '#00ff00', '#0000ff', '#ffff00'], float: true },
            { type: 'confetti', x: -15, y: 150, size: 4, colors: ['#ff69b4', '#00ffff', '#ffa500'], float: true }
        ];
        
        this.decorations = decorations;
    }
    
    updateDecorationAnimations() {
        const time = Date.now() * 0.001; // –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        
        this.decorations.forEach(decoration => {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!decoration.animTime) decoration.animTime = Math.random() * Math.PI * 2;
            if (!decoration.baseY) decoration.baseY = decoration.y;
            if (!decoration.baseX) decoration.baseX = decoration.x;
            
            switch (decoration.type) {
                case 'cloud':
                    if (decoration.drift) {
                        decoration.x += 0.3 + Math.sin(time * 0.5) * 0.1; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                        decoration.y = decoration.baseY + Math.sin(time * 0.3 + decoration.animTime) * 5; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        if (decoration.x > this.canvas.width + 80) {
                            decoration.x = -80;
                            decoration.baseY = 50 + Math.random() * 100;
                        }
                    }
                    break;
                    
                case 'leaf':
                    if (decoration.float) {
                        decoration.x += 0.2 + Math.sin(time * 0.8 + decoration.animTime) * 0.1;
                        decoration.y = decoration.baseY + Math.sin(time * 1.2 + decoration.animTime) * 8; // –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
                        decoration.rotation = (decoration.rotation || 0) + 0.02; // –í—Ä–∞—â–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤
                        if (decoration.x > this.canvas.width + 30) {
                            decoration.x = -30;
                            decoration.baseY = 100 + Math.random() * 150;
                        }
                    }
                    break;
                    
                case 'meteor':
                    if (decoration.trail) {
                        decoration.x += decoration.speed * (1 + Math.sin(time * 2) * 0.1);
                        decoration.y += decoration.speed * 0.5;
                        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä—Ü–∞–Ω–∏–µ
                        decoration.opacity = 0.7 + Math.sin(time * 8 + decoration.animTime) * 0.3;
                        if (decoration.x > this.canvas.width + 100) {
                            decoration.x = -100;
                            decoration.y = 30 + Math.random() * 120;
                            decoration.opacity = 1;
                        }
                    }
                    break;
                    
                case 'butterfly':
                    if (decoration.flutter) {
                        // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ–ª–µ—Ç –±–∞–±–æ—á–∫–∏
                        decoration.x += Math.sin(time * 2 + decoration.animTime) * 1.5 + 0.3;
                        decoration.y = decoration.baseY + Math.cos(time * 3 + decoration.animTime) * 12;
                        decoration.wingPhase = time * 15 + decoration.animTime; // –ë—ã—Å—Ç—Ä–æ–µ –º–∞—Ö–∞–Ω–∏–µ –∫—Ä—ã–ª—å—è–º–∏
                        if (decoration.x > this.canvas.width + 40) {
                            decoration.x = -40;
                            decoration.baseY = 100 + Math.random() * 200;
                        }
                    }
                    break;
                    
                case 'compass':
                    if (decoration.rotate) {
                        decoration.rotation = time * 0.5 + decoration.animTime; // –ü–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
                        decoration.glow = 0.5 + Math.sin(time * 2) * 0.3; // –ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
                    }
                    break;
                    
                case 'star':
                    if (decoration.twinkle) {
                        decoration.brightness = 0.4 + Math.sin(time * 3 + decoration.animTime) * 0.6;
                        decoration.scale = 0.8 + Math.sin(time * 2 + decoration.animTime) * 0.3;
                    }
                    break;
                    
                case 'flag':
                    // –†–∞–∑–≤–µ–≤–∞–Ω–∏–µ —Ñ–ª–∞–≥–∞
                    decoration.wave = time * 4 + decoration.animTime;
                    break;
                    
                case 'building':
                    // –ú–µ—Ä—Ü–∞–Ω–∏–µ –æ–∫–æ–Ω
                    if (!decoration.windowStates) {
                        decoration.windowStates = Array(9).fill().map(() => Math.random() > 0.5);
                    }
                    if (Math.random() < 0.02) { // 2% —à–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
                        decoration.windowStates[Math.floor(Math.random() * decoration.windowStates.length)] = Math.random() > 0.3;
                    }
                    break;
                    
                case 'volcano':
                    // –ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è –ª–∞–≤–∞
                    decoration.lavaGlow = 0.6 + Math.sin(time * 2 + decoration.animTime) * 0.4;
                    // –°–ª—É—á–∞–π–Ω—ã–µ –∏—Å–∫—Ä—ã
                    if (Math.random() < 0.1) {
                        if (!decoration.sparks) decoration.sparks = [];
                        decoration.sparks.push({
                            x: decoration.x + decoration.width * 0.5 + (Math.random() - 0.5) * 20,
                            y: decoration.y,
                            vx: (Math.random() - 0.5) * 4,
                            vy: -Math.random() * 6 - 2,
                            life: 1,
                            decay: 0.02
                        });
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–∫—Ä—ã
                    if (decoration.sparks) {
                        decoration.sparks = decoration.sparks.filter(spark => {
                            spark.x += spark.vx;
                            spark.y += spark.vy;
                            spark.vy += 0.1; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
                            spark.life -= spark.decay;
                            return spark.life > 0;
                        });
                    }
                    break;
                    
                case 'sun':
                    // –ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ —Å–æ–ª–Ω—Ü–µ —Å –ª—É—á–∞–º–∏
                    decoration.pulse = 0.9 + Math.sin(time * 1.5) * 0.1;
                    decoration.rayRotation = time * 0.3;
                    break;
                    
                case 'flower':
                    // –õ–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
                    decoration.sway = Math.sin(time * 1.5 + decoration.animTime) * 2;
                    break;
                    
                case 'tree':
                case 'palm_tree':
                    // –ü–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤
                    decoration.sway = Math.sin(time * 0.8 + decoration.animTime) * 3;
                    break;
                    
                case 'football':
                    // –ü—Ä—ã–≥–∞—é—â–∏–π –º—è—á
                    if (decoration.bounce) {
                        decoration.y = decoration.baseY + Math.abs(Math.sin(time * 3 + decoration.animTime)) * 20;
                        decoration.rotation = (decoration.rotation || 0) + 0.1;
                    }
                    break;
                    
                case 'stadium_light':
                    // –ú–µ—Ä—Ü–∞—é—â–∏–µ –æ–≥–Ω–∏ —Å—Ç–∞–¥–∏–æ–Ω–∞
                    decoration.brightness = 0.7 + Math.sin(time * 4 + decoration.animTime) * 0.3;
                    break;
                    
                case 'confetti':
                    // –ü–∞–¥–∞—é—â–µ–µ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
                    if (decoration.float) {
                        decoration.x += 0.5 + Math.sin(time * 1.5 + decoration.animTime) * 0.3;
                        decoration.y = decoration.baseY + Math.sin(time * 2 + decoration.animTime) * 15;
                        decoration.rotation = (decoration.rotation || 0) + 0.05;
                        if (decoration.x > this.canvas.width + 20) {
                            decoration.x = -20;
                            decoration.baseY = 80 + Math.random() * 100;
                        }
                    }
                    break;
                    
                case 'team_flag':
                    // –†–∞–∑–≤–µ–≤–∞–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥
                    decoration.wave = time * 5 + decoration.animTime;
                    break;
            }
        });
    }
    
    drawDecorations() {
        this.decorations.forEach(decoration => {
            this.ctx.save();
            
            switch (decoration.type) {
                case 'building':
                    this.drawBuilding(decoration);
                    break;
                case 'flag':
                    this.drawFlag(decoration);
                    break;
                case 'star':
                    this.drawStar(decoration);
                    break;
                case 'mountain':
                    this.drawMountain(decoration);
                    break;
                case 'cloud':
                    this.drawCloud(decoration);
                    break;
                case 'compass':
                    this.drawCompass(decoration);
                    break;
                case 'tree':
                    this.drawTree(decoration);
                    break;
                case 'palm_tree':
                    this.drawPalmTree(decoration);
                    break;
                case 'bush':
                    this.drawBush(decoration);
                    break;
                case 'leaf':
                    this.drawLeaf(decoration);
                    break;
                case 'pawprint':
                    this.drawPawprint(decoration);
                    break;
                case 'volcano':
                    this.drawVolcano(decoration);
                    break;
                case 'fern':
                    this.drawFern(decoration);
                    break;
                case 'meteor':
                    this.drawMeteor(decoration);
                    break;
                case 'prehistoric_plant':
                    this.drawPrehistoricPlant(decoration);
                    break;
                case 'flower':
                    this.drawFlower(decoration);
                    break;
                case 'butterfly':
                    this.drawButterfly(decoration);
                    break;
                case 'sun':
                    this.drawSun(decoration);
                    break;
                case 'grass':
                    this.drawGrass(decoration);
                    break;
                case 'football':
                    this.drawFootball(decoration);
                    break;
                case 'goal':
                    this.drawGoal(decoration);
                    break;
                case 'team_flag':
                    this.drawTeamFlag(decoration);
                    break;
                case 'stadium_light':
                    this.drawStadiumLight(decoration);
                    break;
                case 'stadium':
                    this.drawStadium(decoration);
                    break;
                case 'confetti':
                    this.drawConfetti(decoration);
                    break;
            }
            
            this.ctx.restore();
        });
    }
    
    // Drawing methods for different decoration types
    drawBuilding(decoration) {
        // –¢–µ–Ω—å –∑–¥–∞–Ω–∏—è
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        this.ctx.fillRect(decoration.x + 3, decoration.y + 3, decoration.width, decoration.height);
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∑–¥–∞–Ω–∏—è
        const gradient = this.ctx.createLinearGradient(
            decoration.x, decoration.y, 
            decoration.x + decoration.width, decoration.y
        );
        gradient.addColorStop(0, decoration.color);
        gradient.addColorStop(1, this.darkenColor(decoration.color, 0.3));
        
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(decoration.x, decoration.y, decoration.width, decoration.height);
        
        // –û–∫–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        const windowStates = decoration.windowStates || Array(9).fill(true);
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < Math.floor(decoration.height / 20); j++) {
                const windowIndex = i + j * 3;
                if (windowIndex < windowStates.length && windowStates[windowIndex]) {
                    // –°–≤–µ—Ç—è—â–∏–µ—Å—è –æ–∫–Ω–∞
                    this.ctx.shadowColor = '#ffeb3b';
                    this.ctx.shadowBlur = 5;
                    this.ctx.fillStyle = '#ffeb3b';
                } else {
                    // –¢–µ–º–Ω—ã–µ –æ–∫–Ω–∞
                    this.ctx.shadowBlur = 0;
                    this.ctx.fillStyle = '#2c3e50';
                }
                
                this.ctx.fillRect(
                    decoration.x + 5 + i * 10,
                    decoration.y + 10 + j * 15,
                    6, 8
                );
            }
        }
        this.ctx.shadowBlur = 0;
    }
    
    drawFlag(decoration) {
        // –§–ª–∞–≥—à—Ç–æ–∫ —Å —Ç–µ–Ω—å—é
        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
        this.ctx.lineWidth = 4;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x + 2, decoration.y + 2);
        this.ctx.lineTo(decoration.x + 2, decoration.y + 62);
        this.ctx.stroke();
        
        this.ctx.strokeStyle = '#8d6e63';
        this.ctx.lineWidth = 3;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y);
        this.ctx.lineTo(decoration.x, decoration.y + 60);
        this.ctx.stroke();
        
        // –†–∞–∑–≤–µ–≤–∞—é—â–∏–π—Å—è —Ñ–ª–∞–≥
        const wave = decoration.wave || 0;
        decoration.colors.forEach((color, index) => {
            this.ctx.fillStyle = color;
            
            // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω–∏—Å—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            this.ctx.beginPath();
            const y = decoration.y + index * 8;
            const segments = 8;
            
            for (let i = 0; i <= segments; i++) {
                const x = decoration.x + 3 + (i / segments) * decoration.size;
                const waveOffset = Math.sin(wave + i * 0.5) * 3;
                const waveY = y + waveOffset;
                
                if (i === 0) {
                    this.ctx.moveTo(x, y);
                    this.ctx.lineTo(x, y + 8);
                } else if (i === segments) {
                    this.ctx.lineTo(x, waveY + 8);
                    this.ctx.lineTo(x, waveY);
                } else {
                    this.ctx.lineTo(x, waveY);
                }
            }
            
            // –ó–∞–º—ã–∫–∞–µ–º –∫–æ–Ω—Ç—É—Ä
            for (let i = segments; i >= 0; i--) {
                const x = decoration.x + 3 + (i / segments) * decoration.size;
                const waveOffset = Math.sin(wave + i * 0.5) * 3;
                const waveY = y + waveOffset;
                this.ctx.lineTo(x, waveY + 8);
            }
            
            this.ctx.closePath();
            this.ctx.fill();
        });
    }
    
    drawStar(decoration) {
        const brightness = decoration.brightness || 1;
        const scale = decoration.scale || 1;
        const size = decoration.size * scale;
        
        // –°–≤–µ—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥—ã
        if (decoration.twinkle) {
            this.ctx.shadowColor = decoration.color;
            this.ctx.shadowBlur = 10 * brightness;
        }
        
        this.ctx.globalAlpha = brightness;
        this.ctx.fillStyle = decoration.color;
        this.ctx.beginPath();
        
        // –†–∏—Å—É–µ–º 5-–∫–æ–Ω–µ—á–Ω—É—é –∑–≤–µ–∑–¥—É
        for (let i = 0; i < 10; i++) {
            const angle = (i * Math.PI) / 5;
            const radius = i % 2 === 0 ? size : size * 0.4;
            const x = decoration.x + Math.cos(angle) * radius;
            const y = decoration.y + Math.sin(angle) * radius;
            
            if (i === 0) this.ctx.moveTo(x, y);
            else this.ctx.lineTo(x, y);
        }
        
        this.ctx.closePath();
        this.ctx.fill();
        this.ctx.shadowBlur = 0;
        this.ctx.globalAlpha = 1;
    }
    
    drawMountain(decoration) {
        this.ctx.fillStyle = decoration.color;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y + decoration.height);
        this.ctx.lineTo(decoration.x + decoration.width / 2, decoration.y);
        this.ctx.lineTo(decoration.x + decoration.width, decoration.y + decoration.height);
        this.ctx.closePath();
        this.ctx.fill();
        
        // Snow cap
        this.ctx.fillStyle = '#ffffff';
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x + decoration.width * 0.3, decoration.y + decoration.height * 0.3);
        this.ctx.lineTo(decoration.x + decoration.width / 2, decoration.y);
        this.ctx.lineTo(decoration.x + decoration.width * 0.7, decoration.y + decoration.height * 0.3);
        this.ctx.closePath();
        this.ctx.fill();
    }
    
    drawCloud(decoration) {
        this.ctx.fillStyle = '#ffffff';
        this.ctx.globalAlpha = 0.8;
        
        // Cloud circles
        for (let i = 0; i < 4; i++) {
            this.ctx.beginPath();
            this.ctx.arc(
                decoration.x + i * decoration.size * 0.3,
                decoration.y + Math.sin(i) * decoration.size * 0.2,
                decoration.size * (0.4 + i * 0.1),
                0, 2 * Math.PI
            );
            this.ctx.fill();
        }
        
        this.ctx.globalAlpha = 1;
    }
    
    drawCompass(decoration) {
        this.ctx.translate(decoration.x, decoration.y);
        if (decoration.rotation) {
            this.ctx.rotate(decoration.rotation);
        }
        
        // Compass body
        this.ctx.fillStyle = '#8d6e63';
        this.ctx.beginPath();
        this.ctx.arc(0, 0, decoration.size, 0, 2 * Math.PI);
        this.ctx.fill();
        
        // Compass needle
        this.ctx.fillStyle = '#f44336';
        this.ctx.beginPath();
        this.ctx.moveTo(0, -decoration.size * 0.7);
        this.ctx.lineTo(-decoration.size * 0.1, 0);
        this.ctx.lineTo(decoration.size * 0.1, 0);
        this.ctx.closePath();
        this.ctx.fill();
        
        // N marker
        this.ctx.fillStyle = '#ffffff';
        this.ctx.font = '12px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('N', 0, -decoration.size * 0.5);
    }
    
    drawTree(decoration) {
        // Trunk
        this.ctx.fillStyle = '#8d6e63';
        this.ctx.fillRect(
            decoration.x - decoration.width * 0.1,
            decoration.y,
            decoration.width * 0.2,
            decoration.height * 0.6
        );
        
        // Leaves
        this.ctx.fillStyle = decoration.leafColor;
        this.ctx.beginPath();
        this.ctx.arc(
            decoration.x,
            decoration.y - decoration.height * 0.2,
            decoration.width * 0.6,
            0, 2 * Math.PI
        );
        this.ctx.fill();
    }
    
    drawPalmTree(decoration) {
        // Trunk
        this.ctx.strokeStyle = '#8d6e63';
        this.ctx.lineWidth = 8;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y + decoration.height);
        this.ctx.quadraticCurveTo(
            decoration.x + 20,
            decoration.y + decoration.height * 0.5,
            decoration.x,
            decoration.y
        );
        this.ctx.stroke();
        
        // Palm leaves
        this.ctx.strokeStyle = decoration.leafColor;
        this.ctx.lineWidth = 4;
        for (let i = 0; i < 6; i++) {
            const angle = (i * Math.PI) / 3;
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x, decoration.y);
            this.ctx.lineTo(
                decoration.x + Math.cos(angle) * 40,
                decoration.y + Math.sin(angle) * 20
            );
            this.ctx.stroke();
        }
    }
    
    drawBush(decoration) {
        this.ctx.fillStyle = decoration.color;
        
        // Multiple circles for bush shape
        for (let i = 0; i < 3; i++) {
            this.ctx.beginPath();
            this.ctx.arc(
                decoration.x + (i - 1) * decoration.size * 0.3,
                decoration.y + Math.sin(i) * decoration.size * 0.2,
                decoration.size * (0.6 + i * 0.1),
                0, 2 * Math.PI
            );
            this.ctx.fill();
        }
    }
    
    drawLeaf(decoration) {
        this.ctx.fillStyle = decoration.color;
        this.ctx.beginPath();
        this.ctx.ellipse(decoration.x, decoration.y, decoration.size, decoration.size * 0.6, 
                        Math.PI / 4, 0, 2 * Math.PI);
        this.ctx.fill();
    }
    
    drawPawprint(decoration) {
        this.ctx.fillStyle = decoration.color;
        
        // Main pad
        this.ctx.beginPath();
        this.ctx.ellipse(decoration.x, decoration.y, decoration.size * 0.6, decoration.size * 0.8, 0, 0, 2 * Math.PI);
        this.ctx.fill();
        
        // Toes
        for (let i = 0; i < 4; i++) {
            const angle = (i * Math.PI) / 6 - Math.PI / 4;
            this.ctx.beginPath();
            this.ctx.arc(
                decoration.x + Math.cos(angle) * decoration.size * 0.8,
                decoration.y - Math.sin(angle) * decoration.size * 0.8,
                decoration.size * 0.25,
                0, 2 * Math.PI
            );
            this.ctx.fill();
        }
    }
    
    drawVolcano(decoration) {
        // –¢–µ–Ω—å –≤—É–ª–∫–∞–Ω–∞
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x + 3, decoration.y + decoration.height + 3);
        this.ctx.lineTo(decoration.x + decoration.width * 0.2 + 3, decoration.y + 3);
        this.ctx.lineTo(decoration.x + decoration.width * 0.8 + 3, decoration.y + 3);
        this.ctx.lineTo(decoration.x + decoration.width + 3, decoration.y + decoration.height + 3);
        this.ctx.closePath();
        this.ctx.fill();
        
        // –¢–µ–ª–æ –≤—É–ª–∫–∞–Ω–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const volcanoGradient = this.ctx.createLinearGradient(
            decoration.x, decoration.y,
            decoration.x + decoration.width, decoration.y
        );
        volcanoGradient.addColorStop(0, '#6d4c41');
        volcanoGradient.addColorStop(0.5, decoration.color || '#8d6e63');
        volcanoGradient.addColorStop(1, '#5d4037');
        
        this.ctx.fillStyle = volcanoGradient;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y + decoration.height);
        this.ctx.lineTo(decoration.x + decoration.width * 0.2, decoration.y);
        this.ctx.lineTo(decoration.x + decoration.width * 0.8, decoration.y);
        this.ctx.lineTo(decoration.x + decoration.width, decoration.y + decoration.height);
        this.ctx.closePath();
        this.ctx.fill();
        
        // –ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è –ª–∞–≤–∞
        const lavaGlow = decoration.lavaGlow || 1;
        const lavaGradient = this.ctx.createRadialGradient(
            decoration.x + decoration.width * 0.5, decoration.y,
            0,
            decoration.x + decoration.width * 0.5, decoration.y,
            decoration.width * 0.3
        );
        lavaGradient.addColorStop(0, `rgba(255, 193, 7, ${lavaGlow})`);
        lavaGradient.addColorStop(0.5, `rgba(255, 87, 34, ${lavaGlow * 0.8})`);
        lavaGradient.addColorStop(1, `rgba(183, 28, 28, ${lavaGlow * 0.6})`);
        
        this.ctx.fillStyle = lavaGradient;
        this.ctx.fillRect(
            decoration.x + decoration.width * 0.3,
            decoration.y,
            decoration.width * 0.4,
            decoration.height * 0.3
        );
        
        // –†–∏—Å—É–µ–º –∏—Å–∫—Ä—ã
        if (decoration.sparks) {
            decoration.sparks.forEach(spark => {
                this.ctx.globalAlpha = spark.life;
                this.ctx.fillStyle = `hsl(${30 + Math.random() * 30}, 100%, 60%)`;
                this.ctx.beginPath();
                this.ctx.arc(spark.x, spark.y, 2, 0, Math.PI * 2);
                this.ctx.fill();
            });
            this.ctx.globalAlpha = 1;
        }
    }
    
    drawFern(decoration) {
        this.ctx.strokeStyle = decoration.color;
        this.ctx.lineWidth = 3;
        
        // Main stem
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y + decoration.size);
        this.ctx.lineTo(decoration.x, decoration.y);
        this.ctx.stroke();
        
        // Fronds
        this.ctx.lineWidth = 1;
        for (let i = 0; i < 8; i++) {
            const y = decoration.y + (i * decoration.size) / 8;
            const length = decoration.size * 0.3 * (1 - i / 8);
            
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x, y);
            this.ctx.lineTo(decoration.x - length, y - length * 0.3);
            this.ctx.moveTo(decoration.x, y);
            this.ctx.lineTo(decoration.x + length, y - length * 0.3);
            this.ctx.stroke();
        }
    }
    
    drawMeteor(decoration) {
        // Meteor body
        this.ctx.fillStyle = '#ffeb3b';
        this.ctx.beginPath();
        this.ctx.arc(decoration.x, decoration.y, decoration.size, 0, 2 * Math.PI);
        this.ctx.fill();
        
        // Trail
        if (decoration.trail) {
            this.ctx.strokeStyle = '#ff9800';
            this.ctx.lineWidth = decoration.size;
            this.ctx.globalAlpha = 0.5;
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x - 20, decoration.y - 10);
            this.ctx.lineTo(decoration.x, decoration.y);
            this.ctx.stroke();
            this.ctx.globalAlpha = 1;
        }
    }
    
    drawPrehistoricPlant(decoration) {
        this.ctx.strokeStyle = decoration.color;
        this.ctx.lineWidth = 4;
        
        // Main stem
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y + decoration.size);
        this.ctx.quadraticCurveTo(
            decoration.x + decoration.size * 0.3,
            decoration.y + decoration.size * 0.5,
            decoration.x,
            decoration.y
        );
        this.ctx.stroke();
        
        // Large leaves
        this.ctx.fillStyle = decoration.color;
        for (let i = 0; i < 3; i++) {
            const y = decoration.y + (i * decoration.size) / 3;
            this.ctx.beginPath();
            this.ctx.ellipse(decoration.x + decoration.size * 0.3, y, 
                           decoration.size * 0.4, decoration.size * 0.2, 0, 0, 2 * Math.PI);
            this.ctx.fill();
        }
    }
    
    drawFlower(decoration) {
        // Petals
        this.ctx.fillStyle = decoration.color;
        for (let i = 0; i < 6; i++) {
            const angle = (i * Math.PI) / 3;
            this.ctx.beginPath();
            this.ctx.ellipse(
                decoration.x + Math.cos(angle) * decoration.size * 0.5,
                decoration.y + Math.sin(angle) * decoration.size * 0.5,
                decoration.size * 0.4, decoration.size * 0.2, angle, 0, 2 * Math.PI
            );
            this.ctx.fill();
        }
        
        // Center
        this.ctx.fillStyle = '#ffeb3b';
        this.ctx.beginPath();
        this.ctx.arc(decoration.x, decoration.y, decoration.size * 0.3, 0, 2 * Math.PI);
        this.ctx.fill();
    }
    
    drawButterfly(decoration) {
        const wingPhase = decoration.wingPhase || 0;
        const wingScale = 0.8 + Math.sin(wingPhase) * 0.3; // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Ö–∞–Ω–∏—è –∫—Ä—ã–ª—å—è–º–∏
        
        // –¢–µ–Ω—å –±–∞–±–æ—á–∫–∏
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
        this.ctx.beginPath();
        this.ctx.ellipse(decoration.x + 2, decoration.y + decoration.size * 0.8, 
                        decoration.size * 0.6, decoration.size * 0.2, 0, 0, 2 * Math.PI);
        this.ctx.fill();
        
        // –ö—Ä—ã–ª—å—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        decoration.colors.forEach((color, index) => {
            const wingGradient = this.ctx.createRadialGradient(
                decoration.x, decoration.y, 0,
                decoration.x, decoration.y, decoration.size
            );
            wingGradient.addColorStop(0, color);
            wingGradient.addColorStop(1, this.darkenColor(color, 0.3));
            
            this.ctx.fillStyle = wingGradient;
            
            // –í–µ—Ä—Ö–Ω–∏–µ –∫—Ä—ã–ª—å—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this.ctx.save();
            this.ctx.translate(decoration.x, decoration.y);
            this.ctx.scale(wingScale, 1);
            this.ctx.beginPath();
            this.ctx.ellipse(
                (index === 0 ? -decoration.size * 0.3 : decoration.size * 0.3),
                -decoration.size * 0.2,
                decoration.size * 0.4, decoration.size * 0.6, 0, 0, 2 * Math.PI
            );
            this.ctx.fill();
            this.ctx.restore();
            
            // –ù–∏–∂–Ω–∏–µ –∫—Ä—ã–ª—å—è
            this.ctx.save();
            this.ctx.translate(decoration.x, decoration.y);
            this.ctx.scale(wingScale * 0.8, 1);
            this.ctx.beginPath();
            this.ctx.ellipse(
                (index === 0 ? -decoration.size * 0.2 : decoration.size * 0.2),
                decoration.size * 0.2,
                decoration.size * 0.3, decoration.size * 0.4, 0, 0, 2 * Math.PI
            );
            this.ctx.fill();
            this.ctx.restore();
            
            // –£–∑–æ—Ä—ã –Ω–∞ –∫—Ä—ã–ª—å—è—Ö
            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
            this.ctx.beginPath();
            this.ctx.arc(
                decoration.x + (index === 0 ? -decoration.size * 0.2 : decoration.size * 0.2),
                decoration.y - decoration.size * 0.1,
                decoration.size * 0.1, 0, 2 * Math.PI
            );
            this.ctx.fill();
        });
        
        // –¢–µ–ª–æ –±–∞–±–æ—á–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const bodyGradient = this.ctx.createLinearGradient(
            decoration.x, decoration.y - decoration.size * 0.5,
            decoration.x, decoration.y + decoration.size * 0.5
        );
        bodyGradient.addColorStop(0, '#6d4c41');
        bodyGradient.addColorStop(1, '#3e2723');
        
        this.ctx.strokeStyle = bodyGradient;
        this.ctx.lineWidth = 3;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y - decoration.size * 0.5);
        this.ctx.lineTo(decoration.x, decoration.y + decoration.size * 0.5);
        this.ctx.stroke();
        
        // –£—Å–∏–∫–∏
        this.ctx.strokeStyle = '#3e2723';
        this.ctx.lineWidth = 1;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x - 2, decoration.y - decoration.size * 0.4);
        this.ctx.lineTo(decoration.x - 5, decoration.y - decoration.size * 0.6);
        this.ctx.moveTo(decoration.x + 2, decoration.y - decoration.size * 0.4);
        this.ctx.lineTo(decoration.x + 5, decoration.y - decoration.size * 0.6);
        this.ctx.stroke();
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    darkenColor(color, factor) {
        if (color.startsWith('#')) {
            const r = parseInt(color.slice(1, 3), 16);
            const g = parseInt(color.slice(3, 5), 16);
            const b = parseInt(color.slice(5, 7), 16);
            return `rgb(${Math.floor(r * (1 - factor))}, ${Math.floor(g * (1 - factor))}, ${Math.floor(b * (1 - factor))})`;
        }
        return color;
    }

    drawSun(decoration) {
        const pulse = decoration.pulse || 1;
        const rayRotation = decoration.rayRotation || 0;
        
        // –°–≤–µ—á–µ–Ω–∏–µ —Å–æ–ª–Ω—Ü–∞
        const gradient = this.ctx.createRadialGradient(
            decoration.x, decoration.y, 0,
            decoration.x, decoration.y, decoration.size * pulse * 2
        );
        gradient.addColorStop(0, 'rgba(255, 235, 59, 0.8)');
        gradient.addColorStop(0.5, 'rgba(255, 193, 7, 0.4)');
        gradient.addColorStop(1, 'rgba(255, 193, 7, 0)');
        
        this.ctx.fillStyle = gradient;
        this.ctx.beginPath();
        this.ctx.arc(decoration.x, decoration.y, decoration.size * pulse * 2, 0, Math.PI * 2);
        this.ctx.fill();
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–ª–Ω—Ü–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const sunGradient = this.ctx.createRadialGradient(
            decoration.x - decoration.size * 0.3, decoration.y - decoration.size * 0.3, 0,
            decoration.x, decoration.y, decoration.size * pulse
        );
        sunGradient.addColorStop(0, '#fff59d');
        sunGradient.addColorStop(1, '#ffb300');
        
        this.ctx.fillStyle = sunGradient;
        this.ctx.beginPath();
        this.ctx.arc(decoration.x, decoration.y, decoration.size * pulse, 0, Math.PI * 2);
        this.ctx.fill();
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—É—á–∏
        if (decoration.rays) {
            this.ctx.strokeStyle = '#ffeb3b';
            this.ctx.lineWidth = 2;
            this.ctx.globalAlpha = 0.8;
            
            for (let i = 0; i < 12; i++) {
                const angle = (i * Math.PI) / 6 + rayRotation;
                const rayLength = decoration.size + 10 + Math.sin(rayRotation * 3 + i) * 5;
                const startX = decoration.x + Math.cos(angle) * (decoration.size * pulse + 3);
                const startY = decoration.y + Math.sin(angle) * (decoration.size * pulse + 3);
                const endX = decoration.x + Math.cos(angle) * rayLength;
                const endY = decoration.y + Math.sin(angle) * rayLength;
                
                this.ctx.beginPath();
                this.ctx.moveTo(startX, startY);
                this.ctx.lineTo(endX, endY);
                this.ctx.stroke();
            }
            this.ctx.globalAlpha = 1;
        }
    }

    // –ú–µ—Ç–æ–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    drawGrass(decoration) {
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ç—Ä–∞–≤—ã
        const grassGradient = this.ctx.createLinearGradient(
            decoration.x, decoration.y,
            decoration.x, decoration.y + decoration.height
        );
        grassGradient.addColorStop(0, '#4caf50');
        grassGradient.addColorStop(1, '#2e7d32');
        
        this.ctx.fillStyle = grassGradient;
        this.ctx.fillRect(decoration.x, decoration.y, decoration.width, decoration.height);
        
        // –ü–æ–ª–æ—Å–∫–∏ –Ω–∞ –ø–æ–ª–µ
        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
        this.ctx.lineWidth = 2;
        for (let i = 0; i < decoration.width; i += 50) {
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x + i, decoration.y);
            this.ctx.lineTo(decoration.x + i, decoration.y + decoration.height);
            this.ctx.stroke();
        }
    }

    drawFootball(decoration) {
        const rotation = decoration.rotation || 0;
        
        // –¢–µ–Ω—å –º—è—á–∞
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        this.ctx.beginPath();
        this.ctx.ellipse(decoration.x + 3, decoration.y + decoration.size + 5, 
                        decoration.size * 0.8, decoration.size * 0.3, 0, 0, 2 * Math.PI);
        this.ctx.fill();
        
        // –û—Å–Ω–æ–≤–∞ –º—è—á–∞
        this.ctx.fillStyle = '#ffffff';
        this.ctx.beginPath();
        this.ctx.arc(decoration.x, decoration.y, decoration.size, 0, 2 * Math.PI);
        this.ctx.fill();
        
        // –ß–µ—Ä–Ω—ã–µ –ø—è—Ç–Ω–∞ (–ø–µ–Ω—Ç–∞–≥–æ–Ω—ã)
        this.ctx.save();
        this.ctx.translate(decoration.x, decoration.y);
        this.ctx.rotate(rotation);
        
        this.ctx.fillStyle = '#000000';
        for (let i = 0; i < 5; i++) {
            const angle = (i * 2 * Math.PI) / 5;
            const x = Math.cos(angle) * decoration.size * 0.4;
            const y = Math.sin(angle) * decoration.size * 0.4;
            
            this.ctx.beginPath();
            for (let j = 0; j < 5; j++) {
                const pentAngle = (j * 2 * Math.PI) / 5;
                const px = x + Math.cos(pentAngle) * decoration.size * 0.15;
                const py = y + Math.sin(pentAngle) * decoration.size * 0.15;
                
                if (j === 0) this.ctx.moveTo(px, py);
                else this.ctx.lineTo(px, py);
            }
            this.ctx.closePath();
            this.ctx.fill();
        }
        
        this.ctx.restore();
    }

    drawGoal(decoration) {
        // –°—Ç–æ–π–∫–∏ –≤–æ—Ä–æ—Ç
        this.ctx.strokeStyle = '#ffffff';
        this.ctx.lineWidth = 4;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y + decoration.height);
        this.ctx.lineTo(decoration.x, decoration.y);
        this.ctx.lineTo(decoration.x + decoration.width, decoration.y);
        this.ctx.lineTo(decoration.x + decoration.width, decoration.y + decoration.height);
        this.ctx.stroke();
        
        // –°–µ—Ç–∫–∞
        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';
        this.ctx.lineWidth = 1;
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
        for (let i = 10; i < decoration.width; i += 10) {
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x + i, decoration.y);
            this.ctx.lineTo(decoration.x + i, decoration.y + decoration.height);
            this.ctx.stroke();
        }
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
        for (let i = 8; i < decoration.height; i += 8) {
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x, decoration.y + i);
            this.ctx.lineTo(decoration.x + decoration.width, decoration.y + i);
            this.ctx.stroke();
        }
    }

    drawTeamFlag(decoration) {
        const wave = decoration.wave || 0;
        
        // –§–ª–∞–≥—à—Ç–æ–∫
        this.ctx.strokeStyle = '#8d6e63';
        this.ctx.lineWidth = 3;
        this.ctx.beginPath();
        this.ctx.moveTo(decoration.x, decoration.y);
        this.ctx.lineTo(decoration.x, decoration.y + 60);
        this.ctx.stroke();
        
        // –†–∞–∑–≤–µ–≤–∞—é—â–∏–π—Å—è —Ñ–ª–∞–≥ –∫–æ–º–∞–Ω–¥—ã
        decoration.colors.forEach((color, index) => {
            this.ctx.fillStyle = color;
            
            this.ctx.beginPath();
            const y = decoration.y + index * 10;
            const segments = 6;
            
            for (let i = 0; i <= segments; i++) {
                const x = decoration.x + 3 + (i / segments) * decoration.size;
                const waveOffset = Math.sin(wave + i * 0.8) * 4;
                const waveY = y + waveOffset;
                
                if (i === 0) {
                    this.ctx.moveTo(x, y);
                    this.ctx.lineTo(x, y + 10);
                } else if (i === segments) {
                    this.ctx.lineTo(x, waveY + 10);
                    this.ctx.lineTo(x, waveY);
                } else {
                    this.ctx.lineTo(x, waveY);
                }
            }
            
            for (let i = segments; i >= 0; i--) {
                const x = decoration.x + 3 + (i / segments) * decoration.size;
                const waveOffset = Math.sin(wave + i * 0.8) * 4;
                const waveY = y + waveOffset;
                this.ctx.lineTo(x, waveY + 10);
            }
            
            this.ctx.closePath();
            this.ctx.fill();
        });
    }

    drawStadiumLight(decoration) {
        const brightness = decoration.brightness || 1;
        
        // –°–≤–µ—á–µ–Ω–∏–µ
        this.ctx.shadowColor = '#ffeb3b';
        this.ctx.shadowBlur = 20 * brightness;
        
        // –û—Å–Ω–æ–≤–∞ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞
        this.ctx.fillStyle = '#424242';
        this.ctx.fillRect(decoration.x - decoration.size/2, decoration.y, decoration.size, decoration.size/2);
        
        // –°–≤–µ—Ç
        this.ctx.globalAlpha = brightness;
        this.ctx.fillStyle = '#ffeb3b';
        this.ctx.beginPath();
        this.ctx.arc(decoration.x, decoration.y + decoration.size/4, decoration.size/3, 0, 2 * Math.PI);
        this.ctx.fill();
        
        this.ctx.shadowBlur = 0;
        this.ctx.globalAlpha = 1;
    }

    drawStadium(decoration) {
        // –¢—Ä–∏–±—É–Ω—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const stadiumGradient = this.ctx.createLinearGradient(
            decoration.x, decoration.y,
            decoration.x, decoration.y + decoration.height
        );
        stadiumGradient.addColorStop(0, '#616161');
        stadiumGradient.addColorStop(1, '#424242');
        
        this.ctx.fillStyle = stadiumGradient;
        this.ctx.fillRect(decoration.x, decoration.y, decoration.width, decoration.height);
        
        // –†—è–¥—ã —Å–∏–¥–µ–Ω–∏–π
        this.ctx.strokeStyle = '#757575';
        this.ctx.lineWidth = 1;
        for (let i = 5; i < decoration.height; i += 8) {
            this.ctx.beginPath();
            this.ctx.moveTo(decoration.x, decoration.y + i);
            this.ctx.lineTo(decoration.x + decoration.width, decoration.y + i);
            this.ctx.stroke();
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –∑—Ä–∏—Ç–µ–ª–∏ (—Ç–æ—á–∫–∏)
        this.ctx.fillStyle = '#ffeb3b';
        for (let i = 0; i < decoration.width; i += 15) {
            for (let j = 8; j < decoration.height; j += 8) {
                if (Math.random() > 0.3) {
                    this.ctx.beginPath();
                    this.ctx.arc(decoration.x + i + Math.random() * 10, 
                               decoration.y + j, 2, 0, 2 * Math.PI);
                    this.ctx.fill();
                }
            }
        }
    }

    drawConfetti(decoration) {
        const rotation = decoration.rotation || 0;
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
        const color = decoration.colors[Math.floor(Math.random() * decoration.colors.length)];
        
        this.ctx.save();
        this.ctx.translate(decoration.x, decoration.y);
        this.ctx.rotate(rotation);
        
        this.ctx.fillStyle = color;
        this.ctx.fillRect(-decoration.size/2, -decoration.size/2, decoration.size, decoration.size);
        
        this.ctx.restore();
    }
}

class Particle {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.radius = Math.random() * 5 + 2;
        this.speedX = (Math.random() - 0.5) * 4;
        this.speedY = (Math.random() - 0.5) * 4;
        this.life = 30;
        this.maxLife = 30;
    }

    update() {
        this.x += this.speedX;
        this.y += this.speedY;
        this.life--;
    }

    draw(ctx) {
        const alpha = this.life / this.maxLife;
        ctx.fillStyle = `rgba(255, 165, 0, ${alpha})`;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fill();
    }
}

class Word {
    constructor(text, x, imgSrc, gameEngine) {
        this.text = text.toUpperCase();
        this.x = x;
        this.y = 0;
        this.speed = gameEngine ? gameEngine.baseSpeed : 0.3;
        this.imgSrc = imgSrc;
        this.image = new Image();
        this.image.src = imgSrc;
        this.gameEngine = gameEngine;
        this.image.onload = () => {
            console.log(`[GameEngine] ‚úì Successfully loaded image for word "${this.text}": ${this.imgSrc}`);
        };
        this.image.onerror = () => {
            console.warn(`[GameEngine] ‚úó Failed to load image for word "${this.text}": ${this.imgSrc}`);
        };
        this.particles = [];
        this.exploding = false;
        this.shakeEffect = null; // üé® –≠—Ñ—Ñ–µ–∫—Ç –¥—Ä–æ–∂–∞–Ω–∏—è
    }

    updateScale(canvasWidth, canvasHeight) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        if (this.gameEngine) {
            this.maxImageSize = this.gameEngine.baseImageSize;
        }
    }

    update() {
        if (this.exploding) {
            this.particles.forEach(p => p.update());
            this.particles = this.particles.filter(p => p.life > 0);
        } else {
            this.y += this.speed;
        }
        
        // üé® –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥—Ä–æ–∂–∞–Ω–∏—è
        if (this.shakeEffect) {
            this.shakeEffect.life--;
            if (this.shakeEffect.life <= 0) {
                this.shakeEffect = null;
            }
        }
    }

    draw(ctx, input) {
        if (this.exploding) {
            this.particles.forEach(p => p.draw(ctx));
            return;
        }

        // üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥—Ä–æ–∂–∞–Ω–∏—è
        let shakeX = 0, shakeY = 0;
        if (this.shakeEffect) {
            const intensity = this.shakeEffect.intensity * (this.shakeEffect.life / 15);
            shakeX = (Math.random() - 0.5) * intensity;
            shakeY = (Math.random() - 0.5) * intensity;
        }

        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        let scaledWidth = 0;
        let scaledHeight = 0;
        const maxSize = this.gameEngine ? this.gameEngine.baseImageSize : 200;
        
        if (this.image.complete && this.image.naturalWidth !== 0) {
            const width = this.image.naturalWidth;
            const height = this.image.naturalHeight;
            const scale = Math.min(maxSize / width, maxSize / height);
            scaledWidth = width * scale;
            scaledHeight = height * scale;
            ctx.drawImage(this.image, this.x - scaledWidth / 2 + shakeX, this.y - scaledHeight / 2 + shakeY, scaledWidth, scaledHeight);
        } else {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            const placeholderSize = maxSize * 0.8;
            ctx.fillStyle = 'lightgray';
            ctx.fillRect(this.x - placeholderSize / 2 + shakeX, this.y - placeholderSize / 2 + shakeY, placeholderSize, placeholderSize);
            ctx.fillStyle = 'black';
            const fontSize = Math.max(20, placeholderSize / 3);
            ctx.font = `${fontSize}px Arial`;
            ctx.textAlign = 'center';
            ctx.fillText('?', this.x + shakeX, this.y + fontSize / 3 + shakeY);
            scaledHeight = placeholderSize;
        }

        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        this.drawWordText(ctx, input, scaledHeight, shakeX, shakeY);
    }

    drawWordText(ctx, input, imageHeight, shakeX = 0, shakeY = 0) {
        const fontSize = this.gameEngine ? this.gameEngine.baseFontSize : 28;
        ctx.font = `${fontSize}px Arial`;
        ctx.textAlign = 'center';
        
        const inputUpper = input.toUpperCase().replace(/\s+/g, ' '); // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        const textY = this.y + imageHeight / 2 + fontSize * 1.5 + shakeY;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        let matchedLength = 0;
        for (let i = 0; i < inputUpper.length && i < this.text.length; i++) {
            if (inputUpper[i] === this.text[i]) {
                matchedLength++;
            } else {
                break; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            }
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        const charWidth = ctx.measureText('M').width; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞
        const spacing = 1.1; // —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏
        const totalWidth = this.text.length * charWidth * spacing;
        const startX = this.x - totalWidth / 2 + shakeX;
        
        // –†–∏—Å—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–¥–µ–ª—å–Ω–æ
        for (let i = 0; i < this.text.length; i++) {
            const char = this.text[i];
            const charX = startX + (i * charWidth * spacing);
            
            // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if (i < matchedLength) {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –∑–µ–ª–µ–Ω—ã–µ
                ctx.fillStyle = '#00FF00';
            } else if (i === matchedLength && input.length > matchedLength) {
                // –¢–µ–∫—É—â–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª - –∫—Ä–∞—Å–Ω—ã–π
                ctx.fillStyle = '#FF4444';
            } else {
                // –ï—â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –±–µ–ª—ã–µ
                ctx.fillStyle = '#FFFFFF';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            ctx.strokeStyle = 'black';
            ctx.lineWidth = 4; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –æ–±–≤–æ–¥–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            ctx.strokeText(char, charX, textY);
            ctx.fillText(char, charX, textY);
        }
        
        ctx.textAlign = 'start'; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    }

    explode() {
        this.exploding = true;
        for (let i = 0; i < 20; i++) {
            this.particles.push(new Particle(this.x, this.y));
        }
    }
}
